{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import io from'socket.io-client';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const GraphWarsGame=()=>{const NEUTRAL=0;const NODE_SIZE=10;const TEAM_COLORS={0:{fill:'#cccccc',stroke:'#666666',name:'Neutral'},1:{fill:'#ff3333',stroke:'#ff6666',name:'Red'},2:{fill:'#3333ff',stroke:'#6666ff',name:'Blue'},3:{fill:'#33cc33',stroke:'#66ff66',name:'Green'},4:{fill:'#cc33cc',stroke:'#ff66ff',name:'Purple'},5:{fill:'#ff9933',stroke:'#ffcc66',name:'Orange'},6:{fill:'#33cccc',stroke:'#66ffff',name:'Cyan'}};const DIFFICULTY_SETTINGS={0:{nodes:20,enemies:1,players:2,connProb:0.15,playerTroops:8,aiTroops:4},1:{nodes:25,enemies:1,players:2,connProb:0.14,playerTroops:8,aiTroops:5},2:{nodes:30,enemies:2,players:3,connProb:0.13,playerTroops:7,aiTroops:5},3:{nodes:35,enemies:2,players:3,connProb:0.12,playerTroops:7,aiTroops:6},4:{nodes:40,enemies:3,players:4,connProb:0.11,playerTroops:7,aiTroops:6},5:{nodes:45,enemies:3,players:4,connProb:0.10,playerTroops:6,aiTroops:7},6:{nodes:50,enemies:4,players:5,connProb:0.09,playerTroops:6,aiTroops:7},7:{nodes:55,enemies:4,players:5,connProb:0.08,playerTroops:6,aiTroops:8},8:{nodes:60,enemies:5,players:6,connProb:0.07,playerTroops:5,aiTroops:8},9:{nodes:65,enemies:5,players:6,connProb:0.06,playerTroops:5,aiTroops:9}};const[nodes,setNodes]=useState([]);const[connections,setConnections]=useState([]);const[teamCounts,setTeamCounts]=useState({});const[selectedNode,setSelectedNode]=useState(null);const[gameOver,setGameOver]=useState(false);const[winner,setWinner]=useState(null);const[gameMessage,setGameMessage]=useState(\"Select mode...\");const[turnNumber,setTurnNumber]=useState(1);const[playerTurn,setPlayerTurn]=useState(true);const[difficulty,setDifficulty]=useState(0);const[score,setScore]=useState(0);const[isMultiplayer,setIsMultiplayer]=useState(false);const[roomId,setRoomId]=useState('');const[socket,setSocket]=useState(null);const[myTeam,setMyTeam]=useState(null);const[players,setPlayers]=useState({});const[isReady,setIsReady]=useState(false);const canvasRef=useRef(null);const[rotation,setRotation]=useState({x:0,y:0});const[isRotating,setIsRotating]=useState(false);const[dragStart,setDragStart]=useState({x:0,y:0});useEffect(()=>{if(isMultiplayer&&!socket){const newSocket=io('http://localhost:3001');setSocket(newSocket);newSocket.on('gameState',_ref=>{let{nodes,connections,players,team,turn,difficulty}=_ref;setNodes(nodes);setConnections(connections);setPlayers(players);setMyTeam(team);setTurnNumber(turn);setDifficulty(difficulty);updateTeamCounts(nodes);setGameMessage(turn===team?\"Your turn!\":\"Waiting for other players...\");});newSocket.on('playerJoined',_ref2=>{let{players}=_ref2;setPlayers(players);setGameMessage(\"Waiting for players to ready up...\");});newSocket.on('gameStart',_ref3=>{let{turn}=_ref3;setTurnNumber(turn);setGameMessage(turn===myTeam?\"Your turn!\":\"Waiting for other players...\");});newSocket.on('gameOver',_ref4=>{let{winner}=_ref4;setGameOver(true);setWinner(winner);setGameMessage(winner===myTeam?\"You Win!\":\"Game Over!\");});newSocket.on('playerEliminated',_ref5=>{let{team}=_ref5;if(team===myTeam){setGameOver(true);setGameMessage(\"You've been eliminated!\");}});newSocket.on('gameFull',()=>{setGameMessage(\"Game is full!\");});return()=>newSocket.disconnect();}else if(!isMultiplayer){var _window$GraphWarsFire;initializeNetwork();(_window$GraphWarsFire=window.GraphWarsFirebase)===null||_window$GraphWarsFire===void 0?void 0:_window$GraphWarsFire.loadLeaderboard();}},[isMultiplayer]);useEffect(()=>{const renderLoop=()=>{renderNetwork();requestAnimationFrame(renderLoop);};const animationId=requestAnimationFrame(renderLoop);return()=>cancelAnimationFrame(animationId);},[nodes,connections,selectedNode,turnNumber,rotation]);const initializeNetwork=()=>{const settings=DIFFICULTY_SETTINGS[difficulty];const newNodes=[];for(let i=0;i<settings.nodes;i++){const theta=Math.random()*Math.PI*2;const phi=Math.random()*Math.PI;const radius=Math.random()*100+100;const x=radius*Math.sin(phi)*Math.cos(theta);const y=radius*Math.sin(phi)*Math.sin(theta);const z=radius*Math.cos(phi);newNodes.push({position:{x,y,z},team:NEUTRAL,troops:Math.floor(Math.random()*3)+1,connections:[],resourceValue:Math.random()*0.7+0.3});}const newConnections=[];for(let i=0;i<newNodes.length;i++){for(let j=i+1;j<newNodes.length;j++){if(Math.random()<settings.connProb){newConnections.push({nodeA:i,nodeB:j});newNodes[i].connections.push(newConnections.length-1);newNodes[j].connections.push(newConnections.length-1);}}}const isolatedNodes=newNodes.map((n,i)=>n.connections.length===0?i:-1).filter(i=>i!==-1);isolatedNodes.forEach(i=>{const nearest=newNodes.reduce((min,n,idx)=>{if(idx===i)return min;const d=Math.sqrt(Math.pow(n.position.x-newNodes[i].position.x,2)+Math.pow(n.position.y-newNodes[i].position.y,2)+Math.pow(n.position.z-newNodes[i].position.z,2));return d<min.d?{d,idx}:min;},{d:Infinity,idx:-1});newConnections.push({nodeA:i,nodeB:nearest.idx});newNodes[i].connections.push(newConnections.length-1);newNodes[nearest.idx].connections.push(newConnections.length-1);});const usedIndices=new Set();const addTeam=(team,troops)=>{let idx;do{idx=Math.floor(Math.random()*newNodes.length);}while(usedIndices.has(idx));usedIndices.add(idx);newNodes[idx].team=team;newNodes[idx].troops=troops;};addTeam(1,settings.playerTroops);for(let i=0;i<settings.enemies;i++){addTeam(2+i,settings.aiTroops);}setNodes(newNodes);setConnections(newConnections);updateTeamCounts(newNodes);setScore(0);setGameOver(false);setWinner(null);setTurnNumber(1);setPlayerTurn(true);setGameMessage(\"Your turn! Select a node to move from.\");};const updateTeamCounts=currentNodes=>{const counts={0:0};const maxTeams=isMultiplayer?DIFFICULTY_SETTINGS[difficulty].players:DIFFICULTY_SETTINGS[difficulty].enemies+1;for(let i=1;i<=maxTeams;i++){counts[i]=0;}currentNodes.forEach(node=>counts[node.team]=(counts[node.team]||0)+1);setTeamCounts(counts);if(!isMultiplayer){const enemyCount=Object.keys(counts).reduce((sum,key)=>parseInt(key)>=2?sum+counts[key]:sum,0);if(counts[1]===currentNodes.length){var _window$GraphWarsFire2;setGameOver(true);setWinner(1);const finalScore=calculateScore();setScore(finalScore);(_window$GraphWarsFire2=window.GraphWarsFirebase)===null||_window$GraphWarsFire2===void 0?void 0:_window$GraphWarsFire2.saveScore(difficulty,finalScore);}else if(counts[1]===0){setGameOver(true);setWinner(2);}}};const calculateScore=()=>{return Math.floor(teamCounts[1]*100/turnNumber*(difficulty+1));};const joinGame=()=>{if(socket&&roomId){socket.emit('joinGame',{roomId,difficulty});}};const readyUp=()=>{if(socket&&roomId){socket.emit('playerReady',{roomId});setIsReady(true);}};const handleMouseDown=e=>{if(e.button===2){setIsRotating(true);setDragStart({x:e.clientX,y:e.clientY});e.preventDefault();return;}handleCanvasClick(e);};const handleMouseMove=e=>{if(!isRotating)return;const deltaX=e.clientX-dragStart.x;const deltaY=e.clientY-dragStart.y;setRotation({x:rotation.x+deltaY*0.005,y:rotation.y+deltaX*0.005});setDragStart({x:e.clientX,y:e.clientY});};const handleMouseUp=()=>setIsRotating(false);const handleMouseLeave=()=>setIsRotating(false);const handleContextMenu=e=>e.preventDefault();const handleCanvasClick=e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const x=e.clientX-rect.left;const y=e.clientY-rect.top;const nodeProjections=nodes.map((node,index)=>{const projected=rotatePoint(node.position.x,node.position.y,node.position.z);return{node,index,projected};}).sort((a,b)=>b.projected.z-a.projected.z);for(const{node,index,projected}of nodeProjections){if(projected.z<-300)continue;const nodeX=projected.x;const nodeY=projected.y;const scaledSize=NODE_SIZE*projected.scale;const dx=x-nodeX;const dy=y-nodeY;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<=scaledSize){handleNodeClick(index);break;}}};const handleNodeClick=nodeIndex=>{if(gameOver||isMultiplayer&&turnNumber!==myTeam||!isMultiplayer&&!playerTurn)return;const clickedNode=nodes[nodeIndex];if(selectedNode===null){if(clickedNode.team===(isMultiplayer?myTeam:1)&&clickedNode.troops>=2){setSelectedNode(nodeIndex);setGameMessage(\"Select a target node.\");}}else{if(selectedNode===nodeIndex){setSelectedNode(null);setGameMessage(isMultiplayer?turnNumber===myTeam?\"Your turn!\":\"Waiting...\":\"Your turn!\");return;}const sourceNode=nodes[selectedNode];const isConnected=sourceNode.connections.some(connIdx=>{const conn=connections[connIdx];return conn.nodeA===selectedNode&&conn.nodeB===nodeIndex||conn.nodeB===selectedNode&&conn.nodeA===nodeIndex;});if(isConnected){if(isMultiplayer){socket.emit('move',{roomId,sourceIdx:selectedNode,targetIdx:nodeIndex});}else{executeTroopMovement(selectedNode,nodeIndex);}setSelectedNode(null);}}};const executeTroopMovement=(sourceIdx,targetIdx)=>{const updatedNodes=[...nodes];const sourceNode=updatedNodes[sourceIdx];const targetNode=updatedNodes[targetIdx];const troopsToMove=Math.max(1,Math.floor(sourceNode.troops/2));sourceNode.troops-=troopsToMove;if(targetNode.team===1){targetNode.troops+=troopsToMove;}else{const attackStrength=troopsToMove;const defenseStrength=targetNode.troops;if(attackStrength>defenseStrength){targetNode.team=1;targetNode.troops=Math.max(1,troopsToMove-Math.floor(defenseStrength*0.8));setScore(prev=>prev+10*(difficulty+1));}else{targetNode.troops=Math.max(1,defenseStrength-Math.floor(attackStrength*0.8));}}setNodes(updatedNodes);updateTeamCounts(updatedNodes);};const endTurn=()=>{setPlayerTurn(false);setTurnNumber(prev=>prev+1);setGameMessage(\"AI taking their turns...\");const updatedNodes=[...nodes];updatedNodes.forEach(node=>{if(node.team===1)node.troops+=1;else if(node.team>=2)node.troops+=Math.floor(1+difficulty/3);});setNodes(updatedNodes);setTimeout(simulateAITurns,500);};const simulateAITurns=()=>{let updatedNodes=[...nodes];const settings=DIFFICULTY_SETTINGS[difficulty];for(let i=0;i<settings.enemies;i++){makeAIMove(2+i,updatedNodes);}setNodes(updatedNodes);setPlayerTurn(true);setGameMessage(\"Your turn! Select a node to move from.\");updateTeamCounts(updatedNodes);};const makeAIMove=(team,nodesRef)=>{const teamNodes=nodesRef.map((node,index)=>({node,index})).filter(_ref6=>{let{node}=_ref6;return node.team===team&&node.troops>=2;});if(teamNodes.length===0)return;const moves=Math.min(1+Math.floor(difficulty/4),teamNodes.length);for(let move=0;move<moves;move++){const sourceNodeData=teamNodes[Math.floor(Math.random()*teamNodes.length)];const sourceIndex=sourceNodeData.index;const sourceNode=sourceNodeData.node;const connectedNodeIndices=sourceNode.connections.map(connIndex=>{const conn=connections[connIndex];return conn.nodeA===sourceIndex?conn.nodeB:conn.nodeA;});const attackableIndices=connectedNodeIndices.filter(idx=>nodesRef[idx].team!==team);if(attackableIndices.length>0&&Math.random()<0.5+difficulty*0.03){const targetIndex=attackableIndices[Math.floor(Math.random()*attackableIndices.length)];const targetNode=nodesRef[targetIndex];const troopsToMove=Math.max(1,Math.floor(sourceNode.troops*(0.5+difficulty*0.02)));sourceNode.troops-=troopsToMove;const adjustedAttackStrength=troopsToMove*(0.8+difficulty*0.04);if(adjustedAttackStrength>targetNode.troops){targetNode.team=team;targetNode.troops=Math.max(1,troopsToMove-Math.floor(targetNode.troops*0.8));}else{targetNode.troops=Math.max(1,targetNode.troops-Math.floor(troopsToMove*0.8));}}}};const rotatePoint=(x,y,z)=>{const canvas=canvasRef.current;if(!canvas)return{x:0,y:0,z:0,scale:1};const centerX=canvas.width/2;const centerY=canvas.height/2;const cosY=Math.cos(rotation.y);const sinY=Math.sin(rotation.y);const x2=x*cosY-z*sinY;const z2=z*cosY+x*sinY;const cosX=Math.cos(rotation.x);const sinX=Math.sin(rotation.x);const y3=y*cosX-z2*sinX;const z3=z2*cosX+y*sinX;const scale=600/(600+z3);return{x:centerX+x2*scale,y:centerY+y3*scale,z:z3,scale};};const renderNetwork=()=>{const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');ctx.clearRect(0,0,canvas.width,canvas.height);ctx.font='16px Arial';ctx.fillStyle='#aaaaaa';ctx.textAlign='left';ctx.fillText(`Turn: ${turnNumber}`,10,20);if(isMultiplayer){var _TEAM_COLORS$myTeam;ctx.fillStyle=((_TEAM_COLORS$myTeam=TEAM_COLORS[myTeam])===null||_TEAM_COLORS$myTeam===void 0?void 0:_TEAM_COLORS$myTeam.fill)||'#aaaaaa';ctx.fillText(turnNumber===myTeam?\"Your Turn\":\"Waiting\",10,45);}else{ctx.fillStyle=playerTurn?TEAM_COLORS[1].fill:'#aaaaaa';ctx.fillText(playerTurn?\"Your Turn\":\"AI Turn\",10,45);}for(const connection of connections){const nodeA=nodes[connection.nodeA];const nodeB=nodes[connection.nodeB];if(!nodeA||!nodeB)continue;const projectedA=rotatePoint(nodeA.position.x,nodeA.position.y,nodeA.position.z);const projectedB=rotatePoint(nodeB.position.x,nodeB.position.y,nodeB.position.z);if(projectedA.z<-300||projectedB.z<-300)continue;ctx.strokeStyle=nodeA.team===nodeB.team?TEAM_COLORS[nodeA.team].stroke:nodeA.team===NEUTRAL||nodeB.team===NEUTRAL?'#999999':'#ffff00';ctx.lineWidth=1*(projectedA.scale+projectedB.scale)/2;ctx.beginPath();ctx.moveTo(projectedA.x,projectedA.y);ctx.lineTo(projectedB.x,projectedB.y);ctx.stroke();}if(selectedNode!==null){const selectedNodeObj=nodes[selectedNode];const projectedSelected=rotatePoint(selectedNodeObj.position.x,selectedNodeObj.position.y,selectedNodeObj.position.z);if(projectedSelected.z>=-300){ctx.strokeStyle='#ffffff';ctx.lineWidth=2*projectedSelected.scale;ctx.setLineDash([5,3]);for(const connIndex of selectedNodeObj.connections){const conn=connections[connIndex];const targetNodeIndex=conn.nodeA===selectedNode?conn.nodeB:conn.nodeA;const targetNode=nodes[targetNodeIndex];const projectedTarget=rotatePoint(targetNode.position.x,targetNode.position.y,targetNode.position.z);if(projectedTarget.z<-300)continue;ctx.beginPath();ctx.moveTo(projectedSelected.x,projectedSelected.y);ctx.lineTo(projectedTarget.x,projectedTarget.y);ctx.stroke();const angle=Math.atan2(projectedTarget.y-projectedSelected.y,projectedTarget.x-projectedSelected.x);const arrowSize=8*projectedTarget.scale;ctx.beginPath();ctx.moveTo(projectedTarget.x,projectedTarget.y);ctx.lineTo(projectedTarget.x-arrowSize*Math.cos(angle-Math.PI/6),projectedTarget.y-arrowSize*Math.sin(angle-Math.PI/6));ctx.lineTo(projectedTarget.x-arrowSize*Math.cos(angle+Math.PI/6),projectedTarget.y-arrowSize*Math.sin(angle+Math.PI/6));ctx.closePath();ctx.fillStyle='#ffffff';ctx.fill();}ctx.setLineDash([]);}}const nodeProjections=nodes.map((node,index)=>{const projected=rotatePoint(node.position.x,node.position.y,node.position.z);return{node,index,projected};}).sort((a,b)=>b.projected.z-a.projected.z);for(const{node,index,projected}of nodeProjections){if(projected.z<-300)continue;const x=projected.x;const y=projected.y;const scale=projected.scale;const scaledNodeSize=NODE_SIZE*scale;let isValidTarget=false;if(selectedNode!==null&&index!==selectedNode){const selectedNodeObj=nodes[selectedNode];isValidTarget=selectedNodeObj.connections.some(connIdx=>{const conn=connections[connIdx];return conn.nodeA===selectedNode&&conn.nodeB===index||conn.nodeB===selectedNode&&conn.nodeA===index;});}if(selectedNode===index){ctx.beginPath();ctx.arc(x,y,scaledNodeSize+4*scale,0,Math.PI*2);ctx.fillStyle='rgba(255, 255, 255, 0.5)';ctx.fill();}else if(isValidTarget){ctx.beginPath();ctx.arc(x,y,scaledNodeSize+4*scale,0,Math.PI*2);ctx.fillStyle='rgba(255, 255, 0, 0.5)';ctx.fill();const pulseSize=(2*Math.sin(Date.now()/200)+2)*scale;ctx.beginPath();ctx.arc(x,y,scaledNodeSize+pulseSize,0,Math.PI*2);ctx.strokeStyle='#ffff00';ctx.lineWidth=2*scale;ctx.stroke();}ctx.beginPath();ctx.arc(x,y,scaledNodeSize,0,Math.PI*2);ctx.fillStyle=TEAM_COLORS[node.team].fill;ctx.lineWidth=index===selectedNode?3*scale:1*scale;ctx.strokeStyle=index===selectedNode?'#ffffff':'#000000';ctx.fill();ctx.stroke();ctx.font=`bold ${Math.max(8,Math.floor(12*scale))}px Arial`;ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillStyle='#ffffff';ctx.fillText(node.troops.toString(),x,y);ctx.font=`${Math.max(6,Math.floor(9*scale))}px Arial`;ctx.fillStyle='rgba(255, 255, 255, 0.7)';ctx.fillText(index.toString(),x+scaledNodeSize-3*scale,y-scaledNodeSize+3*scale);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center p-4 bg-gray-900 text-white h-full\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"text-2xl font-bold mb-2\",children:[\"Graph Wars \",isMultiplayer?`- Room: ${roomId}`:`- Level ${difficulty}`]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4 text-lg\",children:[!isMultiplayer&&/*#__PURE__*/_jsxs(\"span\",{className:\"mr-4\",children:[\"Score: \",/*#__PURE__*/_jsx(\"span\",{className:\"font-bold\",children:score})]}),Object.entries(teamCounts).map(_ref7=>{let[team,count]=_ref7;return TEAM_COLORS[team]&&/*#__PURE__*/_jsxs(\"span\",{className:\"mr-4\",children:[TEAM_COLORS[team].name,\": \",/*#__PURE__*/_jsx(\"span\",{style:{color:TEAM_COLORS[team].fill},children:count})]},team);})]}),gameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"text-xl mb-2\",children:isMultiplayer?winner===myTeam?\"You Win!\":\"Game Over!\":winner===1?`You Win! Score: ${score}`:\"You Lose!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lg mb-2\",children:gameMessage}),!isMultiplayer?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:800,height:500,className:\"border border-gray-700 bg-black mb-4\",onMouseDown:handleMouseDown,onMouseMove:handleMouseMove,onMouseUp:handleMouseUp,onMouseLeave:handleMouseLeave,onContextMenu:handleContextMenu}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-wrap gap-2 mb-2 justify-center\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\",onClick:()=>setSelectedNode(null),disabled:!playerTurn||selectedNode===null,children:\"Clear Selection\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded\",onClick:endTurn,disabled:!playerTurn,children:\"End Turn\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded\",onClick:()=>setRotation({x:0,y:0}),children:\"Reset View\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\",onClick:initializeNetwork,children:\"New Game\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-purple-700 hover:bg-purple-600 px-4 py-2 rounded\",onClick:()=>setIsMultiplayer(true),children:\"Multiplayer\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2 mb-2 justify-center\",children:Array.from({length:10},(_,i)=>/*#__PURE__*/_jsxs(\"button\",{className:`px-3 py-1 rounded ${difficulty===i?'bg-blue-600':'bg-gray-700 hover:bg-gray-600'}`,onClick:()=>{setDifficulty(i);initializeNetwork();},children:[\"Level \",i]},i))})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:roomId,onChange:e=>setRoomId(e.target.value),placeholder:\"Enter Room ID\",className:\"px-2 py-1 text-black\"}),/*#__PURE__*/_jsx(\"button\",{onClick:joinGame,className:\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded ml-2\",children:\"Join Game\"}),!isReady&&myTeam&&/*#__PURE__*/_jsx(\"button\",{onClick:readyUp,className:\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded ml-2\",children:\"Ready\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded ml-2\",onClick:()=>{setIsMultiplayer(false);socket===null||socket===void 0?void 0:socket.disconnect();setSocket(null);},children:\"Back to Single Player\"})]}),myTeam&&/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:800,height:500,className:\"border border-gray-700 bg-black mb-4\",onMouseDown:handleMouseDown,onMouseMove:handleMouseMove,onMouseUp:handleMouseUp,onMouseLeave:handleMouseLeave,onContextMenu:handleContextMenu}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Players: \",Object.keys(players).length,\"/\",DIFFICULTY_SETTINGS[difficulty].players]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-400 mb-2\",children:\"Right-click and drag to rotate the graph\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 text-sm text-gray-400\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"How to play: Click on one of your nodes to select it (needs at least 2 troops).\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Then click a connected node to move/attack (highlighted in yellow).\"}),/*#__PURE__*/_jsx(\"p\",{children:\"In single-player, click End Turn to let AI play. In multiplayer, turns cycle automatically.\"})]})]});};export default GraphWarsGame;","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","GraphWarsGame","NEUTRAL","NODE_SIZE","TEAM_COLORS","fill","stroke","name","DIFFICULTY_SETTINGS","nodes","enemies","players","connProb","playerTroops","aiTroops","setNodes","connections","setConnections","teamCounts","setTeamCounts","selectedNode","setSelectedNode","gameOver","setGameOver","winner","setWinner","gameMessage","setGameMessage","turnNumber","setTurnNumber","playerTurn","setPlayerTurn","difficulty","setDifficulty","score","setScore","isMultiplayer","setIsMultiplayer","roomId","setRoomId","socket","setSocket","myTeam","setMyTeam","setPlayers","isReady","setIsReady","canvasRef","rotation","setRotation","x","y","isRotating","setIsRotating","dragStart","setDragStart","newSocket","on","_ref","team","turn","updateTeamCounts","_ref2","_ref3","_ref4","_ref5","disconnect","_window$GraphWarsFire","initializeNetwork","window","GraphWarsFirebase","loadLeaderboard","renderLoop","renderNetwork","requestAnimationFrame","animationId","cancelAnimationFrame","settings","newNodes","i","theta","Math","random","PI","phi","radius","sin","cos","z","push","position","troops","floor","resourceValue","newConnections","length","j","nodeA","nodeB","isolatedNodes","map","n","filter","forEach","nearest","reduce","min","idx","d","sqrt","pow","Infinity","usedIndices","Set","addTeam","has","add","currentNodes","counts","maxTeams","node","enemyCount","Object","keys","sum","key","parseInt","_window$GraphWarsFire2","finalScore","calculateScore","saveScore","joinGame","emit","readyUp","handleMouseDown","e","button","clientX","clientY","preventDefault","handleCanvasClick","handleMouseMove","deltaX","deltaY","handleMouseUp","handleMouseLeave","handleContextMenu","canvas","current","rect","getBoundingClientRect","left","top","nodeProjections","index","projected","rotatePoint","sort","a","b","nodeX","nodeY","scaledSize","scale","dx","dy","distance","handleNodeClick","nodeIndex","clickedNode","sourceNode","isConnected","some","connIdx","conn","sourceIdx","targetIdx","executeTroopMovement","updatedNodes","targetNode","troopsToMove","max","attackStrength","defenseStrength","prev","endTurn","setTimeout","simulateAITurns","makeAIMove","nodesRef","teamNodes","_ref6","moves","move","sourceNodeData","sourceIndex","connectedNodeIndices","connIndex","attackableIndices","targetIndex","adjustedAttackStrength","centerX","width","centerY","height","cosY","sinY","x2","z2","cosX","sinX","y3","z3","ctx","getContext","clearRect","font","fillStyle","textAlign","fillText","_TEAM_COLORS$myTeam","connection","projectedA","projectedB","strokeStyle","lineWidth","beginPath","moveTo","lineTo","selectedNodeObj","projectedSelected","setLineDash","targetNodeIndex","projectedTarget","angle","atan2","arrowSize","closePath","scaledNodeSize","isValidTarget","arc","pulseSize","Date","now","textBaseline","toString","className","children","entries","_ref7","count","style","color","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onContextMenu","onClick","disabled","Array","from","_","type","value","onChange","target","placeholder"],"sources":["/Users/jd/Documents/GitHub/infinite/graphwars/src/GraphWarsGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\n\nconst GraphWarsGame = () => {\n  const NEUTRAL = 0;\n  const NODE_SIZE = 10;\n\n  const TEAM_COLORS = {\n    0: { fill: '#cccccc', stroke: '#666666', name: 'Neutral' },\n    1: { fill: '#ff3333', stroke: '#ff6666', name: 'Red' },\n    2: { fill: '#3333ff', stroke: '#6666ff', name: 'Blue' },\n    3: { fill: '#33cc33', stroke: '#66ff66', name: 'Green' },\n    4: { fill: '#cc33cc', stroke: '#ff66ff', name: 'Purple' },\n    5: { fill: '#ff9933', stroke: '#ffcc66', name: 'Orange' },\n    6: { fill: '#33cccc', stroke: '#66ffff', name: 'Cyan' }\n  };\n\n  const DIFFICULTY_SETTINGS = {\n    0: { nodes: 20, enemies: 1, players: 2, connProb: 0.15, playerTroops: 8, aiTroops: 4 },\n    1: { nodes: 25, enemies: 1, players: 2, connProb: 0.14, playerTroops: 8, aiTroops: 5 },\n    2: { nodes: 30, enemies: 2, players: 3, connProb: 0.13, playerTroops: 7, aiTroops: 5 },\n    3: { nodes: 35, enemies: 2, players: 3, connProb: 0.12, playerTroops: 7, aiTroops: 6 },\n    4: { nodes: 40, enemies: 3, players: 4, connProb: 0.11, playerTroops: 7, aiTroops: 6 },\n    5: { nodes: 45, enemies: 3, players: 4, connProb: 0.10, playerTroops: 6, aiTroops: 7 },\n    6: { nodes: 50, enemies: 4, players: 5, connProb: 0.09, playerTroops: 6, aiTroops: 7 },\n    7: { nodes: 55, enemies: 4, players: 5, connProb: 0.08, playerTroops: 6, aiTroops: 8 },\n    8: { nodes: 60, enemies: 5, players: 6, connProb: 0.07, playerTroops: 5, aiTroops: 8 },\n    9: { nodes: 65, enemies: 5, players: 6, connProb: 0.06, playerTroops: 5, aiTroops: 9 }\n  };\n\n  const [nodes, setNodes] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [teamCounts, setTeamCounts] = useState({});\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [gameMessage, setGameMessage] = useState(\"Select mode...\");\n  const [turnNumber, setTurnNumber] = useState(1);\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [difficulty, setDifficulty] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isMultiplayer, setIsMultiplayer] = useState(false);\n  const [roomId, setRoomId] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [myTeam, setMyTeam] = useState(null);\n  const [players, setPlayers] = useState({});\n  const [isReady, setIsReady] = useState(false);\n  const canvasRef = useRef(null);\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const [isRotating, setIsRotating] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (isMultiplayer && !socket) {\n      const newSocket = io('http://localhost:3001');\n      setSocket(newSocket);\n\n      newSocket.on('gameState', ({ nodes, connections, players, team, turn, difficulty }) => {\n        setNodes(nodes);\n        setConnections(connections);\n        setPlayers(players);\n        setMyTeam(team);\n        setTurnNumber(turn);\n        setDifficulty(difficulty);\n        updateTeamCounts(nodes);\n        setGameMessage(turn === team ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n\n      newSocket.on('playerJoined', ({ players }) => {\n        setPlayers(players);\n        setGameMessage(\"Waiting for players to ready up...\");\n      });\n\n      newSocket.on('gameStart', ({ turn }) => {\n        setTurnNumber(turn);\n        setGameMessage(turn === myTeam ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n\n      newSocket.on('gameOver', ({ winner }) => {\n        setGameOver(true);\n        setWinner(winner);\n        setGameMessage(winner === myTeam ? \"You Win!\" : \"Game Over!\");\n      });\n\n      newSocket.on('playerEliminated', ({ team }) => {\n        if (team === myTeam) {\n          setGameOver(true);\n          setGameMessage(\"You've been eliminated!\");\n        }\n      });\n\n      newSocket.on('gameFull', () => {\n        setGameMessage(\"Game is full!\");\n      });\n\n      return () => newSocket.disconnect();\n    } else if (!isMultiplayer) {\n      initializeNetwork();\n      window.GraphWarsFirebase?.loadLeaderboard();\n    }\n  }, [isMultiplayer]);\n\n  useEffect(() => {\n    const renderLoop = () => {\n      renderNetwork();\n      requestAnimationFrame(renderLoop);\n    };\n    const animationId = requestAnimationFrame(renderLoop);\n    return () => cancelAnimationFrame(animationId);\n  }, [nodes, connections, selectedNode, turnNumber, rotation]);\n\n  const initializeNetwork = () => {\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    const newNodes = [];\n    for (let i = 0; i < settings.nodes; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      const radius = Math.random() * 100 + 100;\n      const x = radius * Math.sin(phi) * Math.cos(theta);\n      const y = radius * Math.sin(phi) * Math.sin(theta);\n      const z = radius * Math.cos(phi);\n      newNodes.push({\n        position: { x, y, z },\n        team: NEUTRAL,\n        troops: Math.floor(Math.random() * 3) + 1,\n        connections: [],\n        resourceValue: Math.random() * 0.7 + 0.3\n      });\n    }\n\n    const newConnections = [];\n    for (let i = 0; i < newNodes.length; i++) {\n      for (let j = i + 1; j < newNodes.length; j++) {\n        if (Math.random() < settings.connProb) {\n          newConnections.push({ nodeA: i, nodeB: j });\n          newNodes[i].connections.push(newConnections.length - 1);\n          newNodes[j].connections.push(newConnections.length - 1);\n        }\n      }\n    }\n\n    const isolatedNodes = newNodes.map((n, i) => n.connections.length === 0 ? i : -1).filter(i => i !== -1);\n    isolatedNodes.forEach(i => {\n      const nearest = newNodes.reduce((min, n, idx) => {\n        if (idx === i) return min;\n        const d = Math.sqrt(\n          Math.pow(n.position.x - newNodes[i].position.x, 2) +\n          Math.pow(n.position.y - newNodes[i].position.y, 2) +\n          Math.pow(n.position.z - newNodes[i].position.z, 2)\n        );\n        return d < min.d ? { d, idx } : min;\n      }, { d: Infinity, idx: -1 });\n      newConnections.push({ nodeA: i, nodeB: nearest.idx });\n      newNodes[i].connections.push(newConnections.length - 1);\n      newNodes[nearest.idx].connections.push(newConnections.length - 1);\n    });\n\n    const usedIndices = new Set();\n    const addTeam = (team, troops) => {\n      let idx;\n      do { idx = Math.floor(Math.random() * newNodes.length); } while (usedIndices.has(idx));\n      usedIndices.add(idx);\n      newNodes[idx].team = team;\n      newNodes[idx].troops = troops;\n    };\n    addTeam(1, settings.playerTroops);\n    for (let i = 0; i < settings.enemies; i++) {\n      addTeam(2 + i, settings.aiTroops);\n    }\n\n    setNodes(newNodes);\n    setConnections(newConnections);\n    updateTeamCounts(newNodes);\n    setScore(0);\n    setGameOver(false);\n    setWinner(null);\n    setTurnNumber(1);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n  };\n\n  const updateTeamCounts = (currentNodes) => {\n    const counts = { 0: 0 };\n    const maxTeams = isMultiplayer ? DIFFICULTY_SETTINGS[difficulty].players : DIFFICULTY_SETTINGS[difficulty].enemies + 1;\n    for (let i = 1; i <= maxTeams; i++) {\n      counts[i] = 0;\n    }\n    currentNodes.forEach(node => counts[node.team] = (counts[node.team] || 0) + 1);\n    setTeamCounts(counts);\n\n    if (!isMultiplayer) {\n      const enemyCount = Object.keys(counts).reduce((sum, key) => \n        parseInt(key) >= 2 ? sum + counts[key] : sum, 0);\n      if (counts[1] === currentNodes.length) {\n        setGameOver(true);\n        setWinner(1);\n        const finalScore = calculateScore();\n        setScore(finalScore);\n        window.GraphWarsFirebase?.saveScore(difficulty, finalScore);\n      } else if (counts[1] === 0) {\n        setGameOver(true);\n        setWinner(2);\n      }\n    }\n  };\n\n  const calculateScore = () => {\n    return Math.floor((teamCounts[1] * 100) / turnNumber * (difficulty + 1));\n  };\n\n  const joinGame = () => {\n    if (socket && roomId) {\n      socket.emit('joinGame', { roomId, difficulty });\n    }\n  };\n\n  const readyUp = () => {\n    if (socket && roomId) {\n      socket.emit('playerReady', { roomId });\n      setIsReady(true);\n    }\n  };\n\n  const handleMouseDown = (e) => {\n    if (e.button === 2) {\n      setIsRotating(true);\n      setDragStart({ x: e.clientX, y: e.clientY });\n      e.preventDefault();\n      return;\n    }\n    handleCanvasClick(e);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isRotating) return;\n    const deltaX = e.clientX - dragStart.x;\n    const deltaY = e.clientY - dragStart.y;\n    setRotation({\n      x: rotation.x + deltaY * 0.005,\n      y: rotation.y + deltaX * 0.005\n    });\n    setDragStart({ x: e.clientX, y: e.clientY });\n  };\n\n  const handleMouseUp = () => setIsRotating(false);\n  const handleMouseLeave = () => setIsRotating(false);\n  const handleContextMenu = (e) => e.preventDefault();\n\n  const handleCanvasClick = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return { node, index, projected };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n\n    for (const { node, index, projected } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const nodeX = projected.x;\n      const nodeY = projected.y;\n      const scaledSize = NODE_SIZE * projected.scale;\n      const dx = x - nodeX;\n      const dy = y - nodeY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance <= scaledSize) {\n        handleNodeClick(index);\n        break;\n      }\n    }\n  };\n\n  const handleNodeClick = (nodeIndex) => {\n    if (gameOver || (isMultiplayer && turnNumber !== myTeam) || (!isMultiplayer && !playerTurn)) return;\n\n    const clickedNode = nodes[nodeIndex];\n    if (selectedNode === null) {\n      if (clickedNode.team === (isMultiplayer ? myTeam : 1) && clickedNode.troops >= 2) {\n        setSelectedNode(nodeIndex);\n        setGameMessage(\"Select a target node.\");\n      }\n    } else {\n      if (selectedNode === nodeIndex) {\n        setSelectedNode(null);\n        setGameMessage(isMultiplayer ? (turnNumber === myTeam ? \"Your turn!\" : \"Waiting...\") : \"Your turn!\");\n        return;\n      }\n\n      const sourceNode = nodes[selectedNode];\n      const isConnected = sourceNode.connections.some(connIdx => {\n        const conn = connections[connIdx];\n        return (conn.nodeA === selectedNode && conn.nodeB === nodeIndex) ||\n               (conn.nodeB === selectedNode && conn.nodeA === nodeIndex);\n      });\n\n      if (isConnected) {\n        if (isMultiplayer) {\n          socket.emit('move', { roomId, sourceIdx: selectedNode, targetIdx: nodeIndex });\n        } else {\n          executeTroopMovement(selectedNode, nodeIndex);\n        }\n        setSelectedNode(null);\n      }\n    }\n  };\n\n  const executeTroopMovement = (sourceIdx, targetIdx) => {\n    const updatedNodes = [...nodes];\n    const sourceNode = updatedNodes[sourceIdx];\n    const targetNode = updatedNodes[targetIdx];\n    const troopsToMove = Math.max(1, Math.floor(sourceNode.troops / 2));\n    sourceNode.troops -= troopsToMove;\n\n    if (targetNode.team === 1) {\n      targetNode.troops += troopsToMove;\n    } else {\n      const attackStrength = troopsToMove;\n      const defenseStrength = targetNode.troops;\n      if (attackStrength > defenseStrength) {\n        targetNode.team = 1;\n        targetNode.troops = Math.max(1, troopsToMove - Math.floor(defenseStrength * 0.8));\n        setScore(prev => prev + 10 * (difficulty + 1));\n      } else {\n        targetNode.troops = Math.max(1, defenseStrength - Math.floor(attackStrength * 0.8));\n      }\n    }\n    setNodes(updatedNodes);\n    updateTeamCounts(updatedNodes);\n  };\n\n  const endTurn = () => {\n    setPlayerTurn(false);\n    setTurnNumber(prev => prev + 1);\n    setGameMessage(\"AI taking their turns...\");\n    const updatedNodes = [...nodes];\n    updatedNodes.forEach(node => {\n      if (node.team === 1) node.troops += 1;\n      else if (node.team >= 2) node.troops += Math.floor(1 + difficulty / 3);\n    });\n    setNodes(updatedNodes);\n    setTimeout(simulateAITurns, 500);\n  };\n\n  const simulateAITurns = () => {\n    let updatedNodes = [...nodes];\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    for (let i = 0; i < settings.enemies; i++) {\n      makeAIMove(2 + i, updatedNodes);\n    }\n    setNodes(updatedNodes);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n    updateTeamCounts(updatedNodes);\n  };\n\n  const makeAIMove = (team, nodesRef) => {\n    const teamNodes = nodesRef.map((node, index) => ({ node, index }))\n      .filter(({ node }) => node.team === team && node.troops >= 2);\n    if (teamNodes.length === 0) return;\n\n    const moves = Math.min(1 + Math.floor(difficulty / 4), teamNodes.length);\n    for (let move = 0; move < moves; move++) {\n      const sourceNodeData = teamNodes[Math.floor(Math.random() * teamNodes.length)];\n      const sourceIndex = sourceNodeData.index;\n      const sourceNode = sourceNodeData.node;\n\n      const connectedNodeIndices = sourceNode.connections.map(connIndex => {\n        const conn = connections[connIndex];\n        return conn.nodeA === sourceIndex ? conn.nodeB : conn.nodeA;\n      });\n\n      const attackableIndices = connectedNodeIndices.filter(idx => nodesRef[idx].team !== team);\n      if (attackableIndices.length > 0 && Math.random() < (0.5 + difficulty * 0.03)) {\n        const targetIndex = attackableIndices[Math.floor(Math.random() * attackableIndices.length)];\n        const targetNode = nodesRef[targetIndex];\n        const troopsToMove = Math.max(1, Math.floor(sourceNode.troops * (0.5 + difficulty * 0.02)));\n        sourceNode.troops -= troopsToMove;\n\n        const adjustedAttackStrength = troopsToMove * (0.8 + difficulty * 0.04);\n        if (adjustedAttackStrength > targetNode.troops) {\n          targetNode.team = team;\n          targetNode.troops = Math.max(1, troopsToMove - Math.floor(targetNode.troops * 0.8));\n        } else {\n          targetNode.troops = Math.max(1, targetNode.troops - Math.floor(troopsToMove * 0.8));\n        }\n      }\n    }\n  };\n\n  const rotatePoint = (x, y, z) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0, z: 0, scale: 1 };\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const cosY = Math.cos(rotation.y);\n    const sinY = Math.sin(rotation.y);\n    const x2 = x * cosY - z * sinY;\n    const z2 = z * cosY + x * sinY;\n    const cosX = Math.cos(rotation.x);\n    const sinX = Math.sin(rotation.x);\n    const y3 = y * cosX - z2 * sinX;\n    const z3 = z2 * cosX + y * sinX;\n    const scale = 600 / (600 + z3);\n    return { x: centerX + x2 * scale, y: centerY + y3 * scale, z: z3, scale };\n  };\n\n  const renderNetwork = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.font = '16px Arial';\n    ctx.fillStyle = '#aaaaaa';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Turn: ${turnNumber}`, 10, 20);\n    if (isMultiplayer) {\n      ctx.fillStyle = TEAM_COLORS[myTeam]?.fill || '#aaaaaa';\n      ctx.fillText(turnNumber === myTeam ? \"Your Turn\" : \"Waiting\", 10, 45);\n    } else {\n      ctx.fillStyle = playerTurn ? TEAM_COLORS[1].fill : '#aaaaaa';\n      ctx.fillText(playerTurn ? \"Your Turn\" : \"AI Turn\", 10, 45);\n    }\n\n    for (const connection of connections) {\n      const nodeA = nodes[connection.nodeA];\n      const nodeB = nodes[connection.nodeB];\n      if (!nodeA || !nodeB) continue;\n      const projectedA = rotatePoint(nodeA.position.x, nodeA.position.y, nodeA.position.z);\n      const projectedB = rotatePoint(nodeB.position.x, nodeB.position.y, nodeB.position.z);\n      if (projectedA.z < -300 || projectedB.z < -300) continue;\n\n      ctx.strokeStyle = nodeA.team === nodeB.team ? TEAM_COLORS[nodeA.team].stroke : (nodeA.team === NEUTRAL || nodeB.team === NEUTRAL ? '#999999' : '#ffff00');\n      ctx.lineWidth = 1 * (projectedA.scale + projectedB.scale) / 2;\n      ctx.beginPath();\n      ctx.moveTo(projectedA.x, projectedA.y);\n      ctx.lineTo(projectedB.x, projectedB.y);\n      ctx.stroke();\n    }\n\n    if (selectedNode !== null) {\n      const selectedNodeObj = nodes[selectedNode];\n      const projectedSelected = rotatePoint(selectedNodeObj.position.x, selectedNodeObj.position.y, selectedNodeObj.position.z);\n      if (projectedSelected.z >= -300) {\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2 * projectedSelected.scale;\n        ctx.setLineDash([5, 3]);\n        for (const connIndex of selectedNodeObj.connections) {\n          const conn = connections[connIndex];\n          const targetNodeIndex = conn.nodeA === selectedNode ? conn.nodeB : conn.nodeA;\n          const targetNode = nodes[targetNodeIndex];\n          const projectedTarget = rotatePoint(targetNode.position.x, targetNode.position.y, targetNode.position.z);\n          if (projectedTarget.z < -300) continue;\n\n          ctx.beginPath();\n          ctx.moveTo(projectedSelected.x, projectedSelected.y);\n          ctx.lineTo(projectedTarget.x, projectedTarget.y);\n          ctx.stroke();\n\n          const angle = Math.atan2(projectedTarget.y - projectedSelected.y, projectedTarget.x - projectedSelected.x);\n          const arrowSize = 8 * projectedTarget.scale;\n          ctx.beginPath();\n          ctx.moveTo(projectedTarget.x, projectedTarget.y);\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle - Math.PI/6), projectedTarget.y - arrowSize * Math.sin(angle - Math.PI/6));\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle + Math.PI/6), projectedTarget.y - arrowSize * Math.sin(angle + Math.PI/6));\n          ctx.closePath();\n          ctx.fillStyle = '#ffffff';\n          ctx.fill();\n        }\n        ctx.setLineDash([]);\n      }\n    }\n\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return { node, index, projected };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n\n    for (const { node, index, projected } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const x = projected.x;\n      const y = projected.y;\n      const scale = projected.scale;\n      const scaledNodeSize = NODE_SIZE * scale;\n\n      let isValidTarget = false;\n      if (selectedNode !== null && index !== selectedNode) {\n        const selectedNodeObj = nodes[selectedNode];\n        isValidTarget = selectedNodeObj.connections.some(connIdx => {\n          const conn = connections[connIdx];\n          return (conn.nodeA === selectedNode && conn.nodeB === index) || (conn.nodeB === selectedNode && conn.nodeA === index);\n        });\n      }\n\n      if (selectedNode === index) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.fill();\n      } else if (isValidTarget) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.fill();\n        const pulseSize = (2 * Math.sin(Date.now() / 200) + 2) * scale;\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + pulseSize, 0, Math.PI * 2);\n        ctx.strokeStyle = '#ffff00';\n        ctx.lineWidth = 2 * scale;\n        ctx.stroke();\n      }\n\n      ctx.beginPath();\n      ctx.arc(x, y, scaledNodeSize, 0, Math.PI * 2);\n      ctx.fillStyle = TEAM_COLORS[node.team].fill;\n      ctx.lineWidth = index === selectedNode ? 3 * scale : 1 * scale;\n      ctx.strokeStyle = index === selectedNode ? '#ffffff' : '#000000';\n      ctx.fill();\n      ctx.stroke();\n\n      ctx.font = `bold ${Math.max(8, Math.floor(12 * scale))}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText(node.troops.toString(), x, y);\n\n      ctx.font = `${Math.max(6, Math.floor(9 * scale))}px Arial`;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.fillText(index.toString(), x + scaledNodeSize - 3 * scale, y - scaledNodeSize + 3 * scale);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-4 bg-gray-900 text-white h-full\">\n      <h2 className=\"text-2xl font-bold mb-2\">Graph Wars {isMultiplayer ? `- Room: ${roomId}` : `- Level ${difficulty}`}</h2>\n      <div className=\"mb-4 text-lg\">\n        {!isMultiplayer && <span className=\"mr-4\">Score: <span className=\"font-bold\">{score}</span></span>}\n        {Object.entries(teamCounts).map(([team, count]) => (\n          TEAM_COLORS[team] && (\n            <span key={team} className=\"mr-4\">\n              {TEAM_COLORS[team].name}: <span style={{color: TEAM_COLORS[team].fill}}>{count}</span>\n            </span>\n          )\n        ))}\n      </div>\n      {gameOver && (\n        <div className=\"text-xl mb-2\">\n          {isMultiplayer \n            ? (winner === myTeam ? \"You Win!\" : \"Game Over!\")\n            : (winner === 1 ? `You Win! Score: ${score}` : \"You Lose!\")}\n        </div>\n      )}\n      <div className=\"text-lg mb-2\">{gameMessage}</div>\n      {!isMultiplayer ? (\n        <>\n          <canvas \n            ref={canvasRef} \n            width={800} \n            height={500} \n            className=\"border border-gray-700 bg-black mb-4\"\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            onMouseLeave={handleMouseLeave}\n            onContextMenu={handleContextMenu}\n          />\n          <div className=\"flex flex-wrap gap-2 mb-2 justify-center\">\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\"\n              onClick={() => setSelectedNode(null)}\n              disabled={!playerTurn || selectedNode === null}\n            >\n              Clear Selection\n            </button>\n            <button \n              className=\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded\"\n              onClick={endTurn}\n              disabled={!playerTurn}\n            >\n              End Turn\n            </button>\n            <button \n              className=\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded\"\n              onClick={() => setRotation({ x: 0, y: 0 })}\n            >\n              Reset View\n            </button>\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\" \n              onClick={initializeNetwork}\n            >\n              New Game\n            </button>\n            <button \n              className=\"bg-purple-700 hover:bg-purple-600 px-4 py-2 rounded\"\n              onClick={() => setIsMultiplayer(true)}\n            >\n              Multiplayer\n            </button>\n          </div>\n          <div className=\"flex flex-wrap gap-2 mb-2 justify-center\">\n            {Array.from({ length: 10 }, (_, i) => (\n              <button\n                key={i}\n                className={`px-3 py-1 rounded ${difficulty === i ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`}\n                onClick={() => { setDifficulty(i); initializeNetwork(); }}\n              >\n                Level {i}\n              </button>\n            ))}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={roomId}\n              onChange={(e) => setRoomId(e.target.value)}\n              placeholder=\"Enter Room ID\"\n              className=\"px-2 py-1 text-black\"\n            />\n            <button onClick={joinGame} className=\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded ml-2\">\n              Join Game\n            </button>\n            {!isReady && myTeam && (\n              <button onClick={readyUp} className=\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded ml-2\">\n                Ready\n              </button>\n            )}\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded ml-2\"\n              onClick={() => { setIsMultiplayer(false); socket?.disconnect(); setSocket(null); }}\n            >\n              Back to Single Player\n            </button>\n          </div>\n          {myTeam && (\n            <canvas \n              ref={canvasRef} \n              width={800} \n              height={500} \n              className=\"border border-gray-700 bg-black mb-4\"\n              onMouseDown={handleMouseDown}\n              onMouseMove={handleMouseMove}\n              onMouseUp={handleMouseUp}\n              onMouseLeave={handleMouseLeave}\n              onContextMenu={handleContextMenu}\n            />\n          )}\n          <div>Players: {Object.keys(players).length}/{DIFFICULTY_SETTINGS[difficulty].players}</div>\n        </>\n      )}\n      <div className=\"text-sm text-gray-400 mb-2\">\n        Right-click and drag to rotate the graph\n      </div>\n      <div className=\"mt-4 text-sm text-gray-400\">\n        <p>How to play: Click on one of your nodes to select it (needs at least 2 troops).</p>\n        <p>Then click a connected node to move/attack (highlighted in yellow).</p>\n        <p>In single-player, click End Turn to let AI play. In multiplayer, turns cycle automatically.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphWarsGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}