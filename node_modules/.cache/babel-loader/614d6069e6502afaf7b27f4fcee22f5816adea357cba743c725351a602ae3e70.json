{"ast":null,"code":"var _jsxFileName = \"/Users/jd/Documents/GitHub/infinite/graphwars/src/GraphWarsGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './styles.css'; // Import the stylesheet\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphWarsGame = () => {\n  _s();\n  const NEUTRAL = 0;\n  const NODE_SIZE = 10;\n  const TEAM_COLORS = {\n    0: {\n      fill: '#cccccc',\n      stroke: '#666666',\n      name: 'Neutral'\n    },\n    1: {\n      fill: '#ff3333',\n      stroke: '#ff6666',\n      name: 'Red'\n    },\n    2: {\n      fill: '#3333ff',\n      stroke: '#6666ff',\n      name: 'Blue'\n    },\n    3: {\n      fill: '#33cc33',\n      stroke: '#66ff66',\n      name: 'Green'\n    },\n    4: {\n      fill: '#cc33cc',\n      stroke: '#ff66ff',\n      name: 'Purple'\n    },\n    5: {\n      fill: '#ff9933',\n      stroke: '#ffcc66',\n      name: 'Orange'\n    },\n    6: {\n      fill: '#33cccc',\n      stroke: '#66ffff',\n      name: 'Cyan'\n    }\n  };\n  const DIFFICULTY_SETTINGS = {\n    0: {\n      nodes: 10,\n      enemies: 1,\n      players: 2,\n      connProb: 0.15,\n      playerTroops: 8,\n      aiTroops: 4\n    },\n    1: {\n      nodes: 20,\n      enemies: 1,\n      players: 2,\n      connProb: 0.14,\n      playerTroops: 8,\n      aiTroops: 5\n    },\n    2: {\n      nodes: 30,\n      enemies: 2,\n      players: 3,\n      connProb: 0.13,\n      playerTroops: 7,\n      aiTroops: 5\n    },\n    3: {\n      nodes: 35,\n      enemies: 2,\n      players: 3,\n      connProb: 0.12,\n      playerTroops: 7,\n      aiTroops: 6\n    },\n    4: {\n      nodes: 40,\n      enemies: 3,\n      players: 4,\n      connProb: 0.11,\n      playerTroops: 7,\n      aiTroops: 6\n    },\n    5: {\n      nodes: 45,\n      enemies: 3,\n      players: 4,\n      connProb: 0.10,\n      playerTroops: 6,\n      aiTroops: 7\n    },\n    6: {\n      nodes: 50,\n      enemies: 4,\n      players: 5,\n      connProb: 0.09,\n      playerTroops: 6,\n      aiTroops: 7\n    },\n    7: {\n      nodes: 55,\n      enemies: 5,\n      players: 6,\n      connProb: 0.08,\n      playerTroops: 8,\n      aiTroops: 8\n    },\n    8: {\n      nodes: 70,\n      enemies: 6,\n      players: 7,\n      connProb: 0.07,\n      playerTroops: 8,\n      aiTroops: 8\n    },\n    9: {\n      nodes: 80,\n      enemies: 7,\n      players: 8,\n      connProb: 0.06,\n      playerTroops: 8,\n      aiTroops: 8\n    }\n  };\n  const [nodes, setNodes] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [teamCounts, setTeamCounts] = useState({});\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [gameMessage, setGameMessage] = useState(\"Select mode...\");\n  const [turnNumber, setTurnNumber] = useState(1);\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [difficulty, setDifficulty] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isMultiplayer, setIsMultiplayer] = useState(false);\n  const [roomId, setRoomId] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [myTeam, setMyTeam] = useState(null);\n  const [players, setPlayers] = useState({});\n  const [isReady, setIsReady] = useState(false);\n  const canvasRef = useRef(null);\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isRotating, setIsRotating] = useState(false);\n  const [dragStart, setDragStart] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    if (isMultiplayer && !socket) {\n      const newSocket = io('http://localhost:3001');\n      setSocket(newSocket);\n      newSocket.on('gameState', ({\n        nodes,\n        connections,\n        players,\n        team,\n        turn,\n        difficulty\n      }) => {\n        setNodes(nodes);\n        setConnections(connections);\n        setPlayers(players);\n        setMyTeam(team);\n        setTurnNumber(turn);\n        setDifficulty(difficulty);\n        updateTeamCounts(nodes);\n        setGameMessage(turn === team ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n      newSocket.on('playerJoined', ({\n        players\n      }) => {\n        setPlayers(players);\n        setGameMessage(\"Waiting for players to ready up...\");\n      });\n      newSocket.on('gameStart', ({\n        turn\n      }) => {\n        setTurnNumber(turn);\n        setGameMessage(turn === myTeam ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n      newSocket.on('gameOver', ({\n        winner\n      }) => {\n        setGameOver(true);\n        setWinner(winner);\n        setGameMessage(winner === myTeam ? \"You Win!\" : \"Game Over!\");\n      });\n      newSocket.on('playerEliminated', ({\n        team\n      }) => {\n        if (team === myTeam) {\n          setGameOver(true);\n          setGameMessage(\"You've been eliminated!\");\n        }\n      });\n      newSocket.on('gameFull', () => {\n        setGameMessage(\"Game is full!\");\n      });\n      return () => newSocket.disconnect();\n    } else if (!isMultiplayer) {\n      var _window$GraphWarsFire;\n      initializeNetwork();\n      (_window$GraphWarsFire = window.GraphWarsFirebase) === null || _window$GraphWarsFire === void 0 ? void 0 : _window$GraphWarsFire.loadLeaderboard();\n    }\n  }, [isMultiplayer]);\n  useEffect(() => {\n    const renderLoop = () => {\n      renderNetwork();\n      requestAnimationFrame(renderLoop);\n    };\n    const animationId = requestAnimationFrame(renderLoop);\n    return () => cancelAnimationFrame(animationId);\n  }, [nodes, connections, selectedNode, turnNumber, rotation]);\n  const initializeNetwork = () => {\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    const newNodes = [];\n    for (let i = 0; i < settings.nodes; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      const radius = Math.random() * 100 + 100;\n      const x = radius * Math.sin(phi) * Math.cos(theta);\n      const y = radius * Math.sin(phi) * Math.sin(theta);\n      const z = radius * Math.cos(phi);\n      newNodes.push({\n        position: {\n          x,\n          y,\n          z\n        },\n        team: NEUTRAL,\n        troops: Math.floor(Math.random() * 3) + 1,\n        connections: [],\n        resourceValue: Math.random() * 0.7 + 0.3\n      });\n    }\n    const newConnections = [];\n    for (let i = 0; i < newNodes.length; i++) {\n      for (let j = i + 1; j < newNodes.length; j++) {\n        if (Math.random() < settings.connProb) {\n          newConnections.push({\n            nodeA: i,\n            nodeB: j\n          });\n          newNodes[i].connections.push(newConnections.length - 1);\n          newNodes[j].connections.push(newConnections.length - 1);\n        }\n      }\n    }\n    const isolatedNodes = newNodes.map((n, i) => n.connections.length === 0 ? i : -1).filter(i => i !== -1);\n    isolatedNodes.forEach(i => {\n      const nearest = newNodes.reduce((min, n, idx) => {\n        if (idx === i) return min;\n        const d = Math.sqrt(Math.pow(n.position.x - newNodes[i].position.x, 2) + Math.pow(n.position.y - newNodes[i].position.y, 2) + Math.pow(n.position.z - newNodes[i].position.z, 2));\n        return d < min.d ? {\n          d,\n          idx\n        } : min;\n      }, {\n        d: Infinity,\n        idx: -1\n      });\n      newConnections.push({\n        nodeA: i,\n        nodeB: nearest.idx\n      });\n      newNodes[i].connections.push(newConnections.length - 1);\n      newNodes[nearest.idx].connections.push(newConnections.length - 1);\n    });\n    const usedIndices = new Set();\n    const addTeam = (team, troops) => {\n      let idx;\n      do {\n        idx = Math.floor(Math.random() * newNodes.length);\n      } while (usedIndices.has(idx));\n      usedIndices.add(idx);\n      newNodes[idx].team = team;\n      newNodes[idx].troops = troops;\n    };\n    addTeam(1, settings.playerTroops);\n    for (let i = 0; i < settings.enemies; i++) {\n      addTeam(2 + i, settings.aiTroops);\n    }\n    setNodes(newNodes);\n    setConnections(newConnections);\n    updateTeamCounts(newNodes);\n    setScore(0);\n    setGameOver(false);\n    setWinner(null);\n    setTurnNumber(1);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n  };\n  const updateTeamCounts = currentNodes => {\n    const counts = {\n      0: 0\n    };\n    const maxTeams = isMultiplayer ? DIFFICULTY_SETTINGS[difficulty].players : DIFFICULTY_SETTINGS[difficulty].enemies + 1;\n    for (let i = 1; i <= maxTeams; i++) {\n      counts[i] = 0;\n    }\n    currentNodes.forEach(node => counts[node.team] = (counts[node.team] || 0) + 1);\n    setTeamCounts(counts);\n    if (!isMultiplayer) {\n      const enemyCount = Object.keys(counts).reduce((sum, key) => parseInt(key) >= 2 ? sum + counts[key] : sum, 0);\n      if (counts[1] === currentNodes.length) {\n        var _window$GraphWarsFire2;\n        setGameOver(true);\n        setWinner(1);\n        const finalScore = calculateScore();\n        setScore(finalScore);\n        (_window$GraphWarsFire2 = window.GraphWarsFirebase) === null || _window$GraphWarsFire2 === void 0 ? void 0 : _window$GraphWarsFire2.saveScore(difficulty, finalScore);\n      } else if (counts[1] === 0) {\n        setGameOver(true);\n        setWinner(2);\n      }\n    }\n  };\n  const calculateScore = () => {\n    return Math.floor(teamCounts[1] * 100 / turnNumber * (difficulty + 1));\n  };\n  const joinGame = () => {\n    if (socket && roomId) {\n      socket.emit('joinGame', {\n        roomId,\n        difficulty\n      });\n    }\n  };\n  const readyUp = () => {\n    if (socket && roomId) {\n      socket.emit('playerReady', {\n        roomId\n      });\n      setIsReady(true);\n    }\n  };\n  const handleMouseDown = e => {\n    if (e.button === 2) {\n      setIsRotating(true);\n      setDragStart({\n        x: e.clientX,\n        y: e.clientY\n      });\n      e.preventDefault();\n      return;\n    }\n    handleCanvasClick(e);\n  };\n  const handleMouseMove = e => {\n    if (!isRotating) return;\n    const deltaX = e.clientX - dragStart.x;\n    const deltaY = e.clientY - dragStart.y;\n    setRotation({\n      x: rotation.x + deltaY * 0.005,\n      y: rotation.y + deltaX * 0.005\n    });\n    setDragStart({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n  const handleMouseUp = () => setIsRotating(false);\n  const handleMouseLeave = () => setIsRotating(false);\n  const handleContextMenu = e => e.preventDefault();\n  const handleCanvasClick = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return {\n        node,\n        index,\n        projected\n      };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n    for (const {\n      node,\n      index,\n      projected\n    } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const nodeX = projected.x;\n      const nodeY = projected.y;\n      const scaledSize = NODE_SIZE * projected.scale;\n      const dx = x - nodeX;\n      const dy = y - nodeY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance <= scaledSize) {\n        handleNodeClick(index);\n        break;\n      }\n    }\n  };\n  const handleNodeClick = nodeIndex => {\n    if (gameOver || isMultiplayer && turnNumber !== myTeam || !isMultiplayer && !playerTurn) return;\n    const clickedNode = nodes[nodeIndex];\n    if (selectedNode === null) {\n      if (clickedNode.team === (isMultiplayer ? myTeam : 1) && clickedNode.troops >= 2) {\n        setSelectedNode(nodeIndex);\n        setGameMessage(\"Select a target node.\");\n      }\n    } else {\n      if (selectedNode === nodeIndex) {\n        setSelectedNode(null);\n        setGameMessage(isMultiplayer ? turnNumber === myTeam ? \"Your turn!\" : \"Waiting...\" : \"Your turn!\");\n        return;\n      }\n      const sourceNode = nodes[selectedNode];\n      const isConnected = sourceNode.connections.some(connIdx => {\n        const conn = connections[connIdx];\n        return conn.nodeA === selectedNode && conn.nodeB === nodeIndex || conn.nodeB === selectedNode && conn.nodeA === nodeIndex;\n      });\n      if (isConnected) {\n        if (isMultiplayer) {\n          socket.emit('move', {\n            roomId,\n            sourceIdx: selectedNode,\n            targetIdx: nodeIndex\n          });\n        } else {\n          executeTroopMovement(selectedNode, nodeIndex);\n        }\n        setSelectedNode(null);\n      }\n    }\n  };\n  const executeTroopMovement = (sourceIdx, targetIdx) => {\n    const updatedNodes = [...nodes];\n    const sourceNode = updatedNodes[sourceIdx];\n    const targetNode = updatedNodes[targetIdx];\n    const troopsToMove = Math.max(1, Math.floor(sourceNode.troops / 2));\n    sourceNode.troops -= troopsToMove;\n    if (targetNode.team === 1) {\n      targetNode.troops += troopsToMove;\n    } else {\n      const attackStrength = troopsToMove;\n      const defenseStrength = targetNode.troops;\n      if (attackStrength > defenseStrength) {\n        targetNode.team = 1;\n        targetNode.troops = Math.max(1, troopsToMove - Math.floor(defenseStrength * 0.8));\n        setScore(prev => prev + 10 * (difficulty + 1));\n      } else {\n        targetNode.troops = Math.max(1, defenseStrength - Math.floor(attackStrength * 0.8));\n      }\n    }\n    setNodes(updatedNodes);\n    updateTeamCounts(updatedNodes);\n  };\n  const endTurn = () => {\n    setPlayerTurn(false);\n    setTurnNumber(prev => prev + 1);\n    setGameMessage(\"AI taking their turns...\");\n    const updatedNodes = [...nodes];\n    updatedNodes.forEach(node => {\n      if (node.team === 1) node.troops += 1;else if (node.team >= 2) node.troops += Math.floor(1 + difficulty / 3);\n    });\n    setNodes(updatedNodes);\n    setTimeout(simulateAITurns, 500);\n  };\n  const simulateAITurns = () => {\n    let updatedNodes = [...nodes];\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    for (let i = 0; i < settings.enemies; i++) {\n      makeAIMove(2 + i, updatedNodes);\n    }\n    setNodes(updatedNodes);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n    updateTeamCounts(updatedNodes);\n  };\n  const makeAIMove = (team, nodesRef) => {\n    const teamNodes = nodesRef.map((node, index) => ({\n      node,\n      index\n    })).filter(({\n      node\n    }) => node.team === team && node.troops >= 2);\n    if (teamNodes.length === 0) return;\n    const moves = Math.min(1 + Math.floor(difficulty / 4), teamNodes.length);\n    for (let move = 0; move < moves; move++) {\n      const sourceNodeData = teamNodes[Math.floor(Math.random() * teamNodes.length)];\n      const sourceIndex = sourceNodeData.index;\n      const sourceNode = sourceNodeData.node;\n      const connectedNodeIndices = sourceNode.connections.map(connIndex => {\n        const conn = connections[connIndex];\n        return conn.nodeA === sourceIndex ? conn.nodeB : conn.nodeA;\n      });\n      const attackableIndices = connectedNodeIndices.filter(idx => nodesRef[idx].team !== team);\n      if (attackableIndices.length > 0 && Math.random() < 0.5 + difficulty * 0.03) {\n        const targetIndex = attackableIndices[Math.floor(Math.random() * attackableIndices.length)];\n        const targetNode = nodesRef[targetIndex];\n        const troopsToMove = Math.max(1, Math.floor(sourceNode.troops * (0.5 + difficulty * 0.02)));\n        sourceNode.troops -= troopsToMove;\n        const adjustedAttackStrength = troopsToMove * (0.8 + difficulty * 0.04);\n        if (adjustedAttackStrength > targetNode.troops) {\n          targetNode.team = team;\n          targetNode.troops = Math.max(1, troopsToMove - Math.floor(targetNode.troops * 0.8));\n        } else {\n          targetNode.troops = Math.max(1, targetNode.troops - Math.floor(troopsToMove * 0.8));\n        }\n      }\n    }\n  };\n  const rotatePoint = (x, y, z) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return {\n      x: 0,\n      y: 0,\n      z: 0,\n      scale: 1\n    };\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const cosY = Math.cos(rotation.y);\n    const sinY = Math.sin(rotation.y);\n    const x2 = x * cosY - z * sinY;\n    const z2 = z * cosY + x * sinY;\n    const cosX = Math.cos(rotation.x);\n    const sinX = Math.sin(rotation.x);\n    const y3 = y * cosX - z2 * sinX;\n    const z3 = z2 * cosX + y * sinX;\n    const scale = 600 / (600 + z3);\n    return {\n      x: centerX + x2 * scale,\n      y: centerY + y3 * scale,\n      z: z3,\n      scale\n    };\n  };\n  const renderNetwork = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.font = '16px Arial';\n    ctx.fillStyle = '#aaaaaa';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Turn: ${turnNumber}`, 10, 20);\n    if (isMultiplayer) {\n      var _TEAM_COLORS$myTeam;\n      ctx.fillStyle = ((_TEAM_COLORS$myTeam = TEAM_COLORS[myTeam]) === null || _TEAM_COLORS$myTeam === void 0 ? void 0 : _TEAM_COLORS$myTeam.fill) || '#aaaaaa';\n      ctx.fillText(turnNumber === myTeam ? \"Your Turn\" : \"Waiting\", 10, 45);\n    } else {\n      ctx.fillStyle = playerTurn ? TEAM_COLORS[1].fill : '#aaaaaa';\n      ctx.fillText(playerTurn ? \"Your Turn\" : \"AI Turn\", 10, 45);\n    }\n    for (const connection of connections) {\n      const nodeA = nodes[connection.nodeA];\n      const nodeB = nodes[connection.nodeB];\n      if (!nodeA || !nodeB) continue;\n      const projectedA = rotatePoint(nodeA.position.x, nodeA.position.y, nodeA.position.z);\n      const projectedB = rotatePoint(nodeB.position.x, nodeB.position.y, nodeB.position.z);\n      if (projectedA.z < -300 || projectedB.z < -300) continue;\n      ctx.strokeStyle = nodeA.team === nodeB.team ? TEAM_COLORS[nodeA.team].stroke : nodeA.team === NEUTRAL || nodeB.team === NEUTRAL ? '#999999' : '#ffff00';\n      ctx.lineWidth = 1 * (projectedA.scale + projectedB.scale) / 2;\n      ctx.beginPath();\n      ctx.moveTo(projectedA.x, projectedA.y);\n      ctx.lineTo(projectedB.x, projectedB.y);\n      ctx.stroke();\n    }\n    if (selectedNode !== null) {\n      const selectedNodeObj = nodes[selectedNode];\n      const projectedSelected = rotatePoint(selectedNodeObj.position.x, selectedNodeObj.position.y, selectedNodeObj.position.z);\n      if (projectedSelected.z >= -300) {\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2 * projectedSelected.scale;\n        ctx.setLineDash([5, 3]);\n        for (const connIndex of selectedNodeObj.connections) {\n          const conn = connections[connIndex];\n          const targetNodeIndex = conn.nodeA === selectedNode ? conn.nodeB : conn.nodeA;\n          const targetNode = nodes[targetNodeIndex];\n          const projectedTarget = rotatePoint(targetNode.position.x, targetNode.position.y, targetNode.position.z);\n          if (projectedTarget.z < -300) continue;\n          ctx.beginPath();\n          ctx.moveTo(projectedSelected.x, projectedSelected.y);\n          ctx.lineTo(projectedTarget.x, projectedTarget.y);\n          ctx.stroke();\n          const angle = Math.atan2(projectedTarget.y - projectedSelected.y, projectedTarget.x - projectedSelected.x);\n          const arrowSize = 8 * projectedTarget.scale;\n          ctx.beginPath();\n          ctx.moveTo(projectedTarget.x, projectedTarget.y);\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle - Math.PI / 6), projectedTarget.y - arrowSize * Math.sin(angle - Math.PI / 6));\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle + Math.PI / 6), projectedTarget.y - arrowSize * Math.sin(angle + Math.PI / 6));\n          ctx.closePath();\n          ctx.fillStyle = '#ffffff';\n          ctx.fill();\n        }\n        ctx.setLineDash([]);\n      }\n    }\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return {\n        node,\n        index,\n        projected\n      };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n    for (const {\n      node,\n      index,\n      projected\n    } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const x = projected.x;\n      const y = projected.y;\n      const scale = projected.scale;\n      const scaledNodeSize = NODE_SIZE * scale;\n      let isValidTarget = false;\n      if (selectedNode !== null && index !== selectedNode) {\n        const selectedNodeObj = nodes[selectedNode];\n        isValidTarget = selectedNodeObj.connections.some(connIdx => {\n          const conn = connections[connIdx];\n          return conn.nodeA === selectedNode && conn.nodeB === index || conn.nodeB === selectedNode && conn.nodeA === index;\n        });\n      }\n      if (selectedNode === index) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.fill();\n      } else if (isValidTarget) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.fill();\n        const pulseSize = (2 * Math.sin(Date.now() / 200) + 2) * scale;\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + pulseSize, 0, Math.PI * 2);\n        ctx.strokeStyle = '#ffff00';\n        ctx.lineWidth = 2 * scale;\n        ctx.stroke();\n      }\n      ctx.beginPath();\n      ctx.arc(x, y, scaledNodeSize, 0, Math.PI * 2);\n      ctx.fillStyle = TEAM_COLORS[node.team].fill;\n      ctx.lineWidth = index === selectedNode ? 3 * scale : 1 * scale;\n      ctx.strokeStyle = index === selectedNode ? '#ffffff' : '#000000';\n      ctx.fill();\n      ctx.stroke();\n      ctx.font = `bold ${Math.max(8, Math.floor(12 * scale))}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText(node.troops.toString(), x, y);\n      ctx.font = `${Math.max(6, Math.floor(9 * scale))}px Arial`;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.fillText(index.toString(), x + scaledNodeSize - 3 * scale, y - scaledNodeSize + 3 * scale);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4 bg-gray-900 text-white h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-2\",\n      children: [\"Graph Wars \", isMultiplayer ? `- Room: ${roomId}` : `- Level ${difficulty}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-lg\",\n      children: [!isMultiplayer && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"mr-4\",\n        children: [\"Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-bold\",\n          children: score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 58\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 28\n      }, this), Object.entries(teamCounts).map(([team, count]) => TEAM_COLORS[team] && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"mr-4\",\n        children: [\"\\xA0\", TEAM_COLORS[team].name, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: TEAM_COLORS[team].fill\n          },\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 47\n        }, this)]\n      }, team, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-xl mb-2\",\n      children: isMultiplayer ? winner === myTeam ? \"You Win!\" : \"Game Over!\" : winner === 1 ? `You Win! Score: ${score}` : \"You Lose!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg mb-2\",\n      children: gameMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 7\n    }, this), !isMultiplayer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 800,\n        height: 500,\n        className: \"border border-gray-700 bg-black mb-4\",\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onMouseLeave: handleMouseLeave,\n        onContextMenu: handleContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-2 mb-2 justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\",\n          onClick: () => setSelectedNode(null),\n          disabled: !playerTurn || selectedNode === null,\n          children: \"Clear Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-green-700 hover:bg-green-600 px-4 py-2 rounded\",\n          onClick: endTurn,\n          disabled: !playerTurn,\n          children: \"End Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded\",\n          onClick: () => setRotation({\n            x: 0,\n            y: 0\n          }),\n          children: \"Reset View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\",\n          onClick: initializeNetwork,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-purple-700 hover:bg-purple-600 px-4 py-2 rounded\",\n          onClick: () => setIsMultiplayer(true),\n          children: \"Multiplayer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-2 mb-2 justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-lg mr-2\",\n          children: \"Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 8\n        }, this), Array.from({\n          length: 10\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `px-3 py-1 rounded ${difficulty === i ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`,\n          onClick: () => {\n            setDifficulty(i);\n            initializeNetwork();\n          },\n          children: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 10\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: roomId,\n          onChange: e => setRoomId(e.target.value),\n          placeholder: \"Enter Room ID\",\n          className: \"px-2 py-1 text-black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: joinGame,\n          className: \"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded ml-2\",\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this), !isReady && myTeam && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: readyUp,\n          className: \"bg-green-700 hover:bg-green-600 px-4 py-2 rounded ml-2\",\n          children: \"Ready\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded ml-2\",\n          onClick: () => {\n            setIsMultiplayer(false);\n            socket === null || socket === void 0 ? void 0 : socket.disconnect();\n            setSocket(null);\n          },\n          children: \"Back to Single Player\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this), myTeam && /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 800,\n        height: 500,\n        className: \"border border-gray-700 bg-black mb-4\",\n        onMouseDown: handleMouseDown,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleMouseUp,\n        onMouseLeave: handleMouseLeave,\n        onContextMenu: handleContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Players: \", Object.keys(players).length, \"/\", DIFFICULTY_SETTINGS[difficulty].players]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-sm text-gray-400 mb-2\",\n      children: \"Right-click and drag to rotate the graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-sm text-gray-400\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"How to play: Click on one of your nodes to select it (needs at least 2 troops).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Then click a connected node to move/attack (highlighted in yellow).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In single-player, click End Turn to let AI play. In multiplayer, turns cycle automatically.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 538,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphWarsGame, \"f/Cz7Q1GydXxnvPPmvQ2cmvJ904=\");\n_c = GraphWarsGame;\nexport default GraphWarsGame;\nvar _c;\n$RefreshReg$(_c, \"GraphWarsGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphWarsGame","_s","NEUTRAL","NODE_SIZE","TEAM_COLORS","fill","stroke","name","DIFFICULTY_SETTINGS","nodes","enemies","players","connProb","playerTroops","aiTroops","setNodes","connections","setConnections","teamCounts","setTeamCounts","selectedNode","setSelectedNode","gameOver","setGameOver","winner","setWinner","gameMessage","setGameMessage","turnNumber","setTurnNumber","playerTurn","setPlayerTurn","difficulty","setDifficulty","score","setScore","isMultiplayer","setIsMultiplayer","roomId","setRoomId","socket","setSocket","myTeam","setMyTeam","setPlayers","isReady","setIsReady","canvasRef","rotation","setRotation","x","y","isRotating","setIsRotating","dragStart","setDragStart","newSocket","on","team","turn","updateTeamCounts","disconnect","_window$GraphWarsFire","initializeNetwork","window","GraphWarsFirebase","loadLeaderboard","renderLoop","renderNetwork","requestAnimationFrame","animationId","cancelAnimationFrame","settings","newNodes","i","theta","Math","random","PI","phi","radius","sin","cos","z","push","position","troops","floor","resourceValue","newConnections","length","j","nodeA","nodeB","isolatedNodes","map","n","filter","forEach","nearest","reduce","min","idx","d","sqrt","pow","Infinity","usedIndices","Set","addTeam","has","add","currentNodes","counts","maxTeams","node","enemyCount","Object","keys","sum","key","parseInt","_window$GraphWarsFire2","finalScore","calculateScore","saveScore","joinGame","emit","readyUp","handleMouseDown","e","button","clientX","clientY","preventDefault","handleCanvasClick","handleMouseMove","deltaX","deltaY","handleMouseUp","handleMouseLeave","handleContextMenu","canvas","current","rect","getBoundingClientRect","left","top","nodeProjections","index","projected","rotatePoint","sort","a","b","nodeX","nodeY","scaledSize","scale","dx","dy","distance","handleNodeClick","nodeIndex","clickedNode","sourceNode","isConnected","some","connIdx","conn","sourceIdx","targetIdx","executeTroopMovement","updatedNodes","targetNode","troopsToMove","max","attackStrength","defenseStrength","prev","endTurn","setTimeout","simulateAITurns","makeAIMove","nodesRef","teamNodes","moves","move","sourceNodeData","sourceIndex","connectedNodeIndices","connIndex","attackableIndices","targetIndex","adjustedAttackStrength","centerX","width","centerY","height","cosY","sinY","x2","z2","cosX","sinX","y3","z3","ctx","getContext","clearRect","font","fillStyle","textAlign","fillText","_TEAM_COLORS$myTeam","connection","projectedA","projectedB","strokeStyle","lineWidth","beginPath","moveTo","lineTo","selectedNodeObj","projectedSelected","setLineDash","targetNodeIndex","projectedTarget","angle","atan2","arrowSize","closePath","scaledNodeSize","isValidTarget","arc","pulseSize","Date","now","textBaseline","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","count","style","color","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onContextMenu","onClick","disabled","Array","from","_","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/jd/Documents/GitHub/infinite/graphwars/src/GraphWarsGame.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport './styles.css'; // Import the stylesheet\n\nconst GraphWarsGame = () => {\n  const NEUTRAL = 0;\n  const NODE_SIZE = 10;\n\n  const TEAM_COLORS = {\n    0: { fill: '#cccccc', stroke: '#666666', name: 'Neutral' },\n    1: { fill: '#ff3333', stroke: '#ff6666', name: 'Red' },\n    2: { fill: '#3333ff', stroke: '#6666ff', name: 'Blue' },\n    3: { fill: '#33cc33', stroke: '#66ff66', name: 'Green' },\n    4: { fill: '#cc33cc', stroke: '#ff66ff', name: 'Purple' },\n    5: { fill: '#ff9933', stroke: '#ffcc66', name: 'Orange' },\n    6: { fill: '#33cccc', stroke: '#66ffff', name: 'Cyan' }\n  };\n\n  const DIFFICULTY_SETTINGS = {\n    0: { nodes: 10, enemies: 1, players: 2, connProb: 0.15, playerTroops: 8, aiTroops: 4 },\n    1: { nodes: 20, enemies: 1, players: 2, connProb: 0.14, playerTroops: 8, aiTroops: 5 },\n    2: { nodes: 30, enemies: 2, players: 3, connProb: 0.13, playerTroops: 7, aiTroops: 5 },\n    3: { nodes: 35, enemies: 2, players: 3, connProb: 0.12, playerTroops: 7, aiTroops: 6 },\n    4: { nodes: 40, enemies: 3, players: 4, connProb: 0.11, playerTroops: 7, aiTroops: 6 },\n    5: { nodes: 45, enemies: 3, players: 4, connProb: 0.10, playerTroops: 6, aiTroops: 7 },\n    6: { nodes: 50, enemies: 4, players: 5, connProb: 0.09, playerTroops: 6, aiTroops: 7 },\n    7: { nodes: 55, enemies: 5, players: 6, connProb: 0.08, playerTroops: 8, aiTroops: 8 },\n    8: { nodes: 70, enemies: 6, players: 7, connProb: 0.07, playerTroops: 8, aiTroops: 8 },\n    9: { nodes: 80, enemies: 7, players: 8, connProb: 0.06, playerTroops: 8, aiTroops: 8 }\n  };\n\n  const [nodes, setNodes] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [teamCounts, setTeamCounts] = useState({});\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [gameMessage, setGameMessage] = useState(\"Select mode...\");\n  const [turnNumber, setTurnNumber] = useState(1);\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [difficulty, setDifficulty] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isMultiplayer, setIsMultiplayer] = useState(false);\n  const [roomId, setRoomId] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [myTeam, setMyTeam] = useState(null);\n  const [players, setPlayers] = useState({});\n  const [isReady, setIsReady] = useState(false);\n  const canvasRef = useRef(null);\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const [isRotating, setIsRotating] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (isMultiplayer && !socket) {\n      const newSocket = io('http://localhost:3001');\n      setSocket(newSocket);\n\n      newSocket.on('gameState', ({ nodes, connections, players, team, turn, difficulty }) => {\n        setNodes(nodes);\n        setConnections(connections);\n        setPlayers(players);\n        setMyTeam(team);\n        setTurnNumber(turn);\n        setDifficulty(difficulty);\n        updateTeamCounts(nodes);\n        setGameMessage(turn === team ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n\n      newSocket.on('playerJoined', ({ players }) => {\n        setPlayers(players);\n        setGameMessage(\"Waiting for players to ready up...\");\n      });\n\n      newSocket.on('gameStart', ({ turn }) => {\n        setTurnNumber(turn);\n        setGameMessage(turn === myTeam ? \"Your turn!\" : \"Waiting for other players...\");\n      });\n\n      newSocket.on('gameOver', ({ winner }) => {\n        setGameOver(true);\n        setWinner(winner);\n        setGameMessage(winner === myTeam ? \"You Win!\" : \"Game Over!\");\n      });\n\n      newSocket.on('playerEliminated', ({ team }) => {\n        if (team === myTeam) {\n          setGameOver(true);\n          setGameMessage(\"You've been eliminated!\");\n        }\n      });\n\n      newSocket.on('gameFull', () => {\n        setGameMessage(\"Game is full!\");\n      });\n\n      return () => newSocket.disconnect();\n    } else if (!isMultiplayer) {\n      initializeNetwork();\n      window.GraphWarsFirebase?.loadLeaderboard();\n    }\n  }, [isMultiplayer]);\n\n  useEffect(() => {\n    const renderLoop = () => {\n      renderNetwork();\n      requestAnimationFrame(renderLoop);\n    };\n    const animationId = requestAnimationFrame(renderLoop);\n    return () => cancelAnimationFrame(animationId);\n  }, [nodes, connections, selectedNode, turnNumber, rotation]);\n\n  const initializeNetwork = () => {\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    const newNodes = [];\n    for (let i = 0; i < settings.nodes; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      const radius = Math.random() * 100 + 100;\n      const x = radius * Math.sin(phi) * Math.cos(theta);\n      const y = radius * Math.sin(phi) * Math.sin(theta);\n      const z = radius * Math.cos(phi);\n      newNodes.push({\n        position: { x, y, z },\n        team: NEUTRAL,\n        troops: Math.floor(Math.random() * 3) + 1,\n        connections: [],\n        resourceValue: Math.random() * 0.7 + 0.3\n      });\n    }\n\n    const newConnections = [];\n    for (let i = 0; i < newNodes.length; i++) {\n      for (let j = i + 1; j < newNodes.length; j++) {\n        if (Math.random() < settings.connProb) {\n          newConnections.push({ nodeA: i, nodeB: j });\n          newNodes[i].connections.push(newConnections.length - 1);\n          newNodes[j].connections.push(newConnections.length - 1);\n        }\n      }\n    }\n\n    const isolatedNodes = newNodes.map((n, i) => n.connections.length === 0 ? i : -1).filter(i => i !== -1);\n    isolatedNodes.forEach(i => {\n      const nearest = newNodes.reduce((min, n, idx) => {\n        if (idx === i) return min;\n        const d = Math.sqrt(\n          Math.pow(n.position.x - newNodes[i].position.x, 2) +\n          Math.pow(n.position.y - newNodes[i].position.y, 2) +\n          Math.pow(n.position.z - newNodes[i].position.z, 2)\n        );\n        return d < min.d ? { d, idx } : min;\n      }, { d: Infinity, idx: -1 });\n      newConnections.push({ nodeA: i, nodeB: nearest.idx });\n      newNodes[i].connections.push(newConnections.length - 1);\n      newNodes[nearest.idx].connections.push(newConnections.length - 1);\n    });\n\n    const usedIndices = new Set();\n    const addTeam = (team, troops) => {\n      let idx;\n      do { idx = Math.floor(Math.random() * newNodes.length); } while (usedIndices.has(idx));\n      usedIndices.add(idx);\n      newNodes[idx].team = team;\n      newNodes[idx].troops = troops;\n    };\n    addTeam(1, settings.playerTroops);\n    for (let i = 0; i < settings.enemies; i++) {\n      addTeam(2 + i, settings.aiTroops);\n    }\n\n    setNodes(newNodes);\n    setConnections(newConnections);\n    updateTeamCounts(newNodes);\n    setScore(0);\n    setGameOver(false);\n    setWinner(null);\n    setTurnNumber(1);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n  };\n\n  const updateTeamCounts = (currentNodes) => {\n    const counts = { 0: 0 };\n    const maxTeams = isMultiplayer ? DIFFICULTY_SETTINGS[difficulty].players : DIFFICULTY_SETTINGS[difficulty].enemies + 1;\n    for (let i = 1; i <= maxTeams; i++) {\n      counts[i] = 0;\n    }\n    currentNodes.forEach(node => counts[node.team] = (counts[node.team] || 0) + 1);\n    setTeamCounts(counts);\n\n    if (!isMultiplayer) {\n      const enemyCount = Object.keys(counts).reduce((sum, key) => \n        parseInt(key) >= 2 ? sum + counts[key] : sum, 0);\n      if (counts[1] === currentNodes.length) {\n        setGameOver(true);\n        setWinner(1);\n        const finalScore = calculateScore();\n        setScore(finalScore);\n        window.GraphWarsFirebase?.saveScore(difficulty, finalScore);\n      } else if (counts[1] === 0) {\n        setGameOver(true);\n        setWinner(2);\n      }\n    }\n  };\n\n  const calculateScore = () => {\n    return Math.floor((teamCounts[1] * 100) / turnNumber * (difficulty + 1));\n  };\n\n  const joinGame = () => {\n    if (socket && roomId) {\n      socket.emit('joinGame', { roomId, difficulty });\n    }\n  };\n\n  const readyUp = () => {\n    if (socket && roomId) {\n      socket.emit('playerReady', { roomId });\n      setIsReady(true);\n    }\n  };\n\n  const handleMouseDown = (e) => {\n    if (e.button === 2) {\n      setIsRotating(true);\n      setDragStart({ x: e.clientX, y: e.clientY });\n      e.preventDefault();\n      return;\n    }\n    handleCanvasClick(e);\n  };\n\n  const handleMouseMove = (e) => {\n    if (!isRotating) return;\n    const deltaX = e.clientX - dragStart.x;\n    const deltaY = e.clientY - dragStart.y;\n    setRotation({\n      x: rotation.x + deltaY * 0.005,\n      y: rotation.y + deltaX * 0.005\n    });\n    setDragStart({ x: e.clientX, y: e.clientY });\n  };\n\n  const handleMouseUp = () => setIsRotating(false);\n  const handleMouseLeave = () => setIsRotating(false);\n  const handleContextMenu = (e) => e.preventDefault();\n\n  const handleCanvasClick = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return { node, index, projected };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n\n    for (const { node, index, projected } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const nodeX = projected.x;\n      const nodeY = projected.y;\n      const scaledSize = NODE_SIZE * projected.scale;\n      const dx = x - nodeX;\n      const dy = y - nodeY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance <= scaledSize) {\n        handleNodeClick(index);\n        break;\n      }\n    }\n  };\n\n  const handleNodeClick = (nodeIndex) => {\n    if (gameOver || (isMultiplayer && turnNumber !== myTeam) || (!isMultiplayer && !playerTurn)) return;\n\n    const clickedNode = nodes[nodeIndex];\n    if (selectedNode === null) {\n      if (clickedNode.team === (isMultiplayer ? myTeam : 1) && clickedNode.troops >= 2) {\n        setSelectedNode(nodeIndex);\n        setGameMessage(\"Select a target node.\");\n      }\n    } else {\n      if (selectedNode === nodeIndex) {\n        setSelectedNode(null);\n        setGameMessage(isMultiplayer ? (turnNumber === myTeam ? \"Your turn!\" : \"Waiting...\") : \"Your turn!\");\n        return;\n      }\n\n      const sourceNode = nodes[selectedNode];\n      const isConnected = sourceNode.connections.some(connIdx => {\n        const conn = connections[connIdx];\n        return (conn.nodeA === selectedNode && conn.nodeB === nodeIndex) ||\n               (conn.nodeB === selectedNode && conn.nodeA === nodeIndex);\n      });\n\n      if (isConnected) {\n        if (isMultiplayer) {\n          socket.emit('move', { roomId, sourceIdx: selectedNode, targetIdx: nodeIndex });\n        } else {\n          executeTroopMovement(selectedNode, nodeIndex);\n        }\n        setSelectedNode(null);\n      }\n    }\n  };\n\n  const executeTroopMovement = (sourceIdx, targetIdx) => {\n    const updatedNodes = [...nodes];\n    const sourceNode = updatedNodes[sourceIdx];\n    const targetNode = updatedNodes[targetIdx];\n    const troopsToMove = Math.max(1, Math.floor(sourceNode.troops / 2));\n    sourceNode.troops -= troopsToMove;\n\n    if (targetNode.team === 1) {\n      targetNode.troops += troopsToMove;\n    } else {\n      const attackStrength = troopsToMove;\n      const defenseStrength = targetNode.troops;\n      if (attackStrength > defenseStrength) {\n        targetNode.team = 1;\n        targetNode.troops = Math.max(1, troopsToMove - Math.floor(defenseStrength * 0.8));\n        setScore(prev => prev + 10 * (difficulty + 1));\n      } else {\n        targetNode.troops = Math.max(1, defenseStrength - Math.floor(attackStrength * 0.8));\n      }\n    }\n    setNodes(updatedNodes);\n    updateTeamCounts(updatedNodes);\n  };\n\n  const endTurn = () => {\n    setPlayerTurn(false);\n    setTurnNumber(prev => prev + 1);\n    setGameMessage(\"AI taking their turns...\");\n    const updatedNodes = [...nodes];\n    updatedNodes.forEach(node => {\n      if (node.team === 1) node.troops += 1;\n      else if (node.team >= 2) node.troops += Math.floor(1 + difficulty / 3);\n    });\n    setNodes(updatedNodes);\n    setTimeout(simulateAITurns, 500);\n  };\n\n  const simulateAITurns = () => {\n    let updatedNodes = [...nodes];\n    const settings = DIFFICULTY_SETTINGS[difficulty];\n    for (let i = 0; i < settings.enemies; i++) {\n      makeAIMove(2 + i, updatedNodes);\n    }\n    setNodes(updatedNodes);\n    setPlayerTurn(true);\n    setGameMessage(\"Your turn! Select a node to move from.\");\n    updateTeamCounts(updatedNodes);\n  };\n\n  const makeAIMove = (team, nodesRef) => {\n    const teamNodes = nodesRef.map((node, index) => ({ node, index }))\n      .filter(({ node }) => node.team === team && node.troops >= 2);\n    if (teamNodes.length === 0) return;\n\n    const moves = Math.min(1 + Math.floor(difficulty / 4), teamNodes.length);\n    for (let move = 0; move < moves; move++) {\n      const sourceNodeData = teamNodes[Math.floor(Math.random() * teamNodes.length)];\n      const sourceIndex = sourceNodeData.index;\n      const sourceNode = sourceNodeData.node;\n\n      const connectedNodeIndices = sourceNode.connections.map(connIndex => {\n        const conn = connections[connIndex];\n        return conn.nodeA === sourceIndex ? conn.nodeB : conn.nodeA;\n      });\n\n      const attackableIndices = connectedNodeIndices.filter(idx => nodesRef[idx].team !== team);\n      if (attackableIndices.length > 0 && Math.random() < (0.5 + difficulty * 0.03)) {\n        const targetIndex = attackableIndices[Math.floor(Math.random() * attackableIndices.length)];\n        const targetNode = nodesRef[targetIndex];\n        const troopsToMove = Math.max(1, Math.floor(sourceNode.troops * (0.5 + difficulty * 0.02)));\n        sourceNode.troops -= troopsToMove;\n\n        const adjustedAttackStrength = troopsToMove * (0.8 + difficulty * 0.04);\n        if (adjustedAttackStrength > targetNode.troops) {\n          targetNode.team = team;\n          targetNode.troops = Math.max(1, troopsToMove - Math.floor(targetNode.troops * 0.8));\n        } else {\n          targetNode.troops = Math.max(1, targetNode.troops - Math.floor(troopsToMove * 0.8));\n        }\n      }\n    }\n  };\n\n  const rotatePoint = (x, y, z) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0, z: 0, scale: 1 };\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const cosY = Math.cos(rotation.y);\n    const sinY = Math.sin(rotation.y);\n    const x2 = x * cosY - z * sinY;\n    const z2 = z * cosY + x * sinY;\n    const cosX = Math.cos(rotation.x);\n    const sinX = Math.sin(rotation.x);\n    const y3 = y * cosX - z2 * sinX;\n    const z3 = z2 * cosX + y * sinX;\n    const scale = 600 / (600 + z3);\n    return { x: centerX + x2 * scale, y: centerY + y3 * scale, z: z3, scale };\n  };\n\n  const renderNetwork = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    ctx.font = '16px Arial';\n    ctx.fillStyle = '#aaaaaa';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Turn: ${turnNumber}`, 10, 20);\n    if (isMultiplayer) {\n      ctx.fillStyle = TEAM_COLORS[myTeam]?.fill || '#aaaaaa';\n      ctx.fillText(turnNumber === myTeam ? \"Your Turn\" : \"Waiting\", 10, 45);\n    } else {\n      ctx.fillStyle = playerTurn ? TEAM_COLORS[1].fill : '#aaaaaa';\n      ctx.fillText(playerTurn ? \"Your Turn\" : \"AI Turn\", 10, 45);\n    }\n\n    for (const connection of connections) {\n      const nodeA = nodes[connection.nodeA];\n      const nodeB = nodes[connection.nodeB];\n      if (!nodeA || !nodeB) continue;\n      const projectedA = rotatePoint(nodeA.position.x, nodeA.position.y, nodeA.position.z);\n      const projectedB = rotatePoint(nodeB.position.x, nodeB.position.y, nodeB.position.z);\n      if (projectedA.z < -300 || projectedB.z < -300) continue;\n\n      ctx.strokeStyle = nodeA.team === nodeB.team ? TEAM_COLORS[nodeA.team].stroke : (nodeA.team === NEUTRAL || nodeB.team === NEUTRAL ? '#999999' : '#ffff00');\n      ctx.lineWidth = 1 * (projectedA.scale + projectedB.scale) / 2;\n      ctx.beginPath();\n      ctx.moveTo(projectedA.x, projectedA.y);\n      ctx.lineTo(projectedB.x, projectedB.y);\n      ctx.stroke();\n    }\n\n    if (selectedNode !== null) {\n      const selectedNodeObj = nodes[selectedNode];\n      const projectedSelected = rotatePoint(selectedNodeObj.position.x, selectedNodeObj.position.y, selectedNodeObj.position.z);\n      if (projectedSelected.z >= -300) {\n        ctx.strokeStyle = '#ffffff';\n        ctx.lineWidth = 2 * projectedSelected.scale;\n        ctx.setLineDash([5, 3]);\n        for (const connIndex of selectedNodeObj.connections) {\n          const conn = connections[connIndex];\n          const targetNodeIndex = conn.nodeA === selectedNode ? conn.nodeB : conn.nodeA;\n          const targetNode = nodes[targetNodeIndex];\n          const projectedTarget = rotatePoint(targetNode.position.x, targetNode.position.y, targetNode.position.z);\n          if (projectedTarget.z < -300) continue;\n\n          ctx.beginPath();\n          ctx.moveTo(projectedSelected.x, projectedSelected.y);\n          ctx.lineTo(projectedTarget.x, projectedTarget.y);\n          ctx.stroke();\n\n          const angle = Math.atan2(projectedTarget.y - projectedSelected.y, projectedTarget.x - projectedSelected.x);\n          const arrowSize = 8 * projectedTarget.scale;\n          ctx.beginPath();\n          ctx.moveTo(projectedTarget.x, projectedTarget.y);\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle - Math.PI/6), projectedTarget.y - arrowSize * Math.sin(angle - Math.PI/6));\n          ctx.lineTo(projectedTarget.x - arrowSize * Math.cos(angle + Math.PI/6), projectedTarget.y - arrowSize * Math.sin(angle + Math.PI/6));\n          ctx.closePath();\n          ctx.fillStyle = '#ffffff';\n          ctx.fill();\n        }\n        ctx.setLineDash([]);\n      }\n    }\n\n    const nodeProjections = nodes.map((node, index) => {\n      const projected = rotatePoint(node.position.x, node.position.y, node.position.z);\n      return { node, index, projected };\n    }).sort((a, b) => b.projected.z - a.projected.z);\n\n    for (const { node, index, projected } of nodeProjections) {\n      if (projected.z < -300) continue;\n      const x = projected.x;\n      const y = projected.y;\n      const scale = projected.scale;\n      const scaledNodeSize = NODE_SIZE * scale;\n\n      let isValidTarget = false;\n      if (selectedNode !== null && index !== selectedNode) {\n        const selectedNodeObj = nodes[selectedNode];\n        isValidTarget = selectedNodeObj.connections.some(connIdx => {\n          const conn = connections[connIdx];\n          return (conn.nodeA === selectedNode && conn.nodeB === index) || (conn.nodeB === selectedNode && conn.nodeA === index);\n        });\n      }\n\n      if (selectedNode === index) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.fill();\n      } else if (isValidTarget) {\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + 4 * scale, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 0, 0.5)';\n        ctx.fill();\n        const pulseSize = (2 * Math.sin(Date.now() / 200) + 2) * scale;\n        ctx.beginPath();\n        ctx.arc(x, y, scaledNodeSize + pulseSize, 0, Math.PI * 2);\n        ctx.strokeStyle = '#ffff00';\n        ctx.lineWidth = 2 * scale;\n        ctx.stroke();\n      }\n\n      ctx.beginPath();\n      ctx.arc(x, y, scaledNodeSize, 0, Math.PI * 2);\n      ctx.fillStyle = TEAM_COLORS[node.team].fill;\n      ctx.lineWidth = index === selectedNode ? 3 * scale : 1 * scale;\n      ctx.strokeStyle = index === selectedNode ? '#ffffff' : '#000000';\n      ctx.fill();\n      ctx.stroke();\n\n      ctx.font = `bold ${Math.max(8, Math.floor(12 * scale))}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText(node.troops.toString(), x, y);\n\n      ctx.font = `${Math.max(6, Math.floor(9 * scale))}px Arial`;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.fillText(index.toString(), x + scaledNodeSize - 3 * scale, y - scaledNodeSize + 3 * scale);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-4 bg-gray-900 text-white h-full\">\n      <h2 className=\"text-2xl font-bold mb-2\">Graph Wars {isMultiplayer ? `- Room: ${roomId}` : `- Level ${difficulty}`}</h2>\n      <div className=\"mb-4 text-lg\">\n        {!isMultiplayer && <span className=\"mr-4\">Score: <span className=\"font-bold\">{score}</span></span>}\n        {Object.entries(teamCounts).map(([team, count]) => (\n          TEAM_COLORS[team] && (\n            <span key={team} className=\"mr-4\">\n              &nbsp;{TEAM_COLORS[team].name}: <span style={{color: TEAM_COLORS[team].fill}}>{count}</span>\n            </span>\n          )\n        ))}\n      </div>\n      {gameOver && (\n        <div className=\"text-xl mb-2\">\n          {isMultiplayer \n            ? (winner === myTeam ? \"You Win!\" : \"Game Over!\")\n            : (winner === 1 ? `You Win! Score: ${score}` : \"You Lose!\")}\n        </div>\n      )}\n      <div className=\"text-lg mb-2\">{gameMessage}</div>\n      {!isMultiplayer ? (\n        <>\n          <canvas \n            ref={canvasRef} \n            width={800} \n            height={500} \n            className=\"border border-gray-700 bg-black mb-4\"\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n            onMouseLeave={handleMouseLeave}\n            onContextMenu={handleContextMenu}\n          />\n          <div className=\"flex flex-wrap gap-2 mb-2 justify-center\">\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\"\n              onClick={() => setSelectedNode(null)}\n              disabled={!playerTurn || selectedNode === null}\n            >\n              Clear Selection\n            </button>\n            <button \n              className=\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded\"\n              onClick={endTurn}\n              disabled={!playerTurn}\n            >\n              End Turn\n            </button>\n            <button \n              className=\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded\"\n              onClick={() => setRotation({ x: 0, y: 0 })}\n            >\n              Reset View\n            </button>\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded\" \n              onClick={initializeNetwork}\n            >\n              New Game\n            </button>\n            <button \n              className=\"bg-purple-700 hover:bg-purple-600 px-4 py-2 rounded\"\n              onClick={() => setIsMultiplayer(true)}\n            >\n              Multiplayer\n            </button>\n          </div>\n\t    <div className=\"flex flex-wrap gap-2 mb-2 justify-center\">\n\t      <span className=\"text-lg mr-2\">Level:</span>\n\t      {Array.from({ length: 10 }, (_, i) => (\n\t        <button\n\t          key={i}\n\t          className={`px-3 py-1 rounded ${difficulty === i ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`}\n\t          onClick={() => { setDifficulty(i); initializeNetwork(); }}\n\t        >\n\t          {i}\n\t        </button>\n\t      ))}\n\t    </div>\n        </>\n      ) : (\n        <>\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={roomId}\n              onChange={(e) => setRoomId(e.target.value)}\n              placeholder=\"Enter Room ID\"\n              className=\"px-2 py-1 text-black\"\n            />\n            <button onClick={joinGame} className=\"bg-blue-700 hover:bg-blue-600 px-4 py-2 rounded ml-2\">\n              Join Game\n            </button>\n            {!isReady && myTeam && (\n              <button onClick={readyUp} className=\"bg-green-700 hover:bg-green-600 px-4 py-2 rounded ml-2\">\n                Ready\n              </button>\n            )}\n            <button \n              className=\"bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded ml-2\"\n              onClick={() => { setIsMultiplayer(false); socket?.disconnect(); setSocket(null); }}\n            >\n              Back to Single Player\n            </button>\n          </div>\n          {myTeam && (\n            <canvas \n              ref={canvasRef} \n              width={800} \n              height={500} \n              className=\"border border-gray-700 bg-black mb-4\"\n              onMouseDown={handleMouseDown}\n              onMouseMove={handleMouseMove}\n              onMouseUp={handleMouseUp}\n              onMouseLeave={handleMouseLeave}\n              onContextMenu={handleContextMenu}\n            />\n          )}\n          <div>Players: {Object.keys(players).length}/{DIFFICULTY_SETTINGS[difficulty].players}</div>\n        </>\n      )}\n      <div className=\"text-sm text-gray-400 mb-2\">\n        Right-click and drag to rotate the graph\n      </div>\n      <div className=\"mt-4 text-sm text-gray-400\">\n        <p>How to play: Click on one of your nodes to select it (needs at least 2 troops).</p>\n        <p>Then click a connected node to move/attack (highlighted in yellow).</p>\n        <p>In single-player, click End Turn to let AI play. In multiplayer, turns cycle automatically.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphWarsGame;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAO,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,OAAO,GAAG,CAAC;EACjB,MAAMC,SAAS,GAAG,EAAE;EAEpB,MAAMC,WAAW,GAAG;IAClB,CAAC,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAU,CAAC;IAC1D,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAM,CAAC;IACtD,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO,CAAC;IACvD,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAQ,CAAC;IACxD,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAS,CAAC;IACzD,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAS,CAAC;IACzD,CAAC,EAAE;MAAEF,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,IAAI,EAAE;IAAO;EACxD,CAAC;EAED,MAAMC,mBAAmB,GAAG;IAC1B,CAAC,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACtF,CAAC,EAAE;MAAEL,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAE;EACvF,CAAC;EAED,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC8B,QAAQ,EAAEC,WAAW,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgC,MAAM,EAAEC,SAAS,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,gBAAgB,CAAC;EAChE,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACwC,UAAU,EAAEC,aAAa,CAAC,GAAGzC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAAC0C,KAAK,EAAEC,QAAQ,CAAC,GAAG3C,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC4C,aAAa,EAAEC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC8C,MAAM,EAAEC,SAAS,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgD,MAAM,EAAEC,SAAS,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACkD,MAAM,EAAEC,SAAS,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACmB,OAAO,EAAEiC,UAAU,CAAC,GAAGpD,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACqD,OAAO,EAAEC,UAAU,CAAC,GAAGtD,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMuD,SAAS,GAAGrD,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACsD,QAAQ,EAAEC,WAAW,CAAC,GAAGzD,QAAQ,CAAC;IAAE0D,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACxD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAC;IAAE0D,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAE1D1D,SAAS,CAAC,MAAM;IACd,IAAI2C,aAAa,IAAI,CAACI,MAAM,EAAE;MAC5B,MAAMgB,SAAS,GAAG7D,EAAE,CAAC,uBAAuB,CAAC;MAC7C8C,SAAS,CAACe,SAAS,CAAC;MAEpBA,SAAS,CAACC,EAAE,CAAC,WAAW,EAAE,CAAC;QAAEhD,KAAK;QAAEO,WAAW;QAAEL,OAAO;QAAE+C,IAAI;QAAEC,IAAI;QAAE3B;MAAW,CAAC,KAAK;QACrFjB,QAAQ,CAACN,KAAK,CAAC;QACfQ,cAAc,CAACD,WAAW,CAAC;QAC3B4B,UAAU,CAACjC,OAAO,CAAC;QACnBgC,SAAS,CAACe,IAAI,CAAC;QACf7B,aAAa,CAAC8B,IAAI,CAAC;QACnB1B,aAAa,CAACD,UAAU,CAAC;QACzB4B,gBAAgB,CAACnD,KAAK,CAAC;QACvBkB,cAAc,CAACgC,IAAI,KAAKD,IAAI,GAAG,YAAY,GAAG,8BAA8B,CAAC;MAC/E,CAAC,CAAC;MAEFF,SAAS,CAACC,EAAE,CAAC,cAAc,EAAE,CAAC;QAAE9C;MAAQ,CAAC,KAAK;QAC5CiC,UAAU,CAACjC,OAAO,CAAC;QACnBgB,cAAc,CAAC,oCAAoC,CAAC;MACtD,CAAC,CAAC;MAEF6B,SAAS,CAACC,EAAE,CAAC,WAAW,EAAE,CAAC;QAAEE;MAAK,CAAC,KAAK;QACtC9B,aAAa,CAAC8B,IAAI,CAAC;QACnBhC,cAAc,CAACgC,IAAI,KAAKjB,MAAM,GAAG,YAAY,GAAG,8BAA8B,CAAC;MACjF,CAAC,CAAC;MAEFc,SAAS,CAACC,EAAE,CAAC,UAAU,EAAE,CAAC;QAAEjC;MAAO,CAAC,KAAK;QACvCD,WAAW,CAAC,IAAI,CAAC;QACjBE,SAAS,CAACD,MAAM,CAAC;QACjBG,cAAc,CAACH,MAAM,KAAKkB,MAAM,GAAG,UAAU,GAAG,YAAY,CAAC;MAC/D,CAAC,CAAC;MAEFc,SAAS,CAACC,EAAE,CAAC,kBAAkB,EAAE,CAAC;QAAEC;MAAK,CAAC,KAAK;QAC7C,IAAIA,IAAI,KAAKhB,MAAM,EAAE;UACnBnB,WAAW,CAAC,IAAI,CAAC;UACjBI,cAAc,CAAC,yBAAyB,CAAC;QAC3C;MACF,CAAC,CAAC;MAEF6B,SAAS,CAACC,EAAE,CAAC,UAAU,EAAE,MAAM;QAC7B9B,cAAc,CAAC,eAAe,CAAC;MACjC,CAAC,CAAC;MAEF,OAAO,MAAM6B,SAAS,CAACK,UAAU,CAAC,CAAC;IACrC,CAAC,MAAM,IAAI,CAACzB,aAAa,EAAE;MAAA,IAAA0B,qBAAA;MACzBC,iBAAiB,CAAC,CAAC;MACnB,CAAAD,qBAAA,GAAAE,MAAM,CAACC,iBAAiB,cAAAH,qBAAA,uBAAxBA,qBAAA,CAA0BI,eAAe,CAAC,CAAC;IAC7C;EACF,CAAC,EAAE,CAAC9B,aAAa,CAAC,CAAC;EAEnB3C,SAAS,CAAC,MAAM;IACd,MAAM0E,UAAU,GAAGA,CAAA,KAAM;MACvBC,aAAa,CAAC,CAAC;MACfC,qBAAqB,CAACF,UAAU,CAAC;IACnC,CAAC;IACD,MAAMG,WAAW,GAAGD,qBAAqB,CAACF,UAAU,CAAC;IACrD,OAAO,MAAMI,oBAAoB,CAACD,WAAW,CAAC;EAChD,CAAC,EAAE,CAAC7D,KAAK,EAAEO,WAAW,EAAEI,YAAY,EAAEQ,UAAU,EAAEoB,QAAQ,CAAC,CAAC;EAE5D,MAAMe,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMS,QAAQ,GAAGhE,mBAAmB,CAACwB,UAAU,CAAC;IAChD,MAAMyC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAAC/D,KAAK,EAAEiE,CAAC,EAAE,EAAE;MACvC,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;MACzC,MAAMC,GAAG,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE;MACnC,MAAME,MAAM,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;MACxC,MAAM3B,CAAC,GAAG8B,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC,GAAGH,IAAI,CAACM,GAAG,CAACP,KAAK,CAAC;MAClD,MAAMxB,CAAC,GAAG6B,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAACF,GAAG,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC;MAClD,MAAMQ,CAAC,GAAGH,MAAM,GAAGJ,IAAI,CAACM,GAAG,CAACH,GAAG,CAAC;MAChCN,QAAQ,CAACW,IAAI,CAAC;QACZC,QAAQ,EAAE;UAAEnC,CAAC;UAAEC,CAAC;UAAEgC;QAAE,CAAC;QACrBzB,IAAI,EAAExD,OAAO;QACboF,MAAM,EAAEV,IAAI,CAACW,KAAK,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QACzC7D,WAAW,EAAE,EAAE;QACfwE,aAAa,EAAEZ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;MACvC,CAAC,CAAC;IACJ;IAEA,MAAMY,cAAc,GAAG,EAAE;IACzB,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,CAACiB,MAAM,EAAEhB,CAAC,EAAE,EAAE;MACxC,KAAK,IAAIiB,CAAC,GAAGjB,CAAC,GAAG,CAAC,EAAEiB,CAAC,GAAGlB,QAAQ,CAACiB,MAAM,EAAEC,CAAC,EAAE,EAAE;QAC5C,IAAIf,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAAC5D,QAAQ,EAAE;UACrC6E,cAAc,CAACL,IAAI,CAAC;YAAEQ,KAAK,EAAElB,CAAC;YAAEmB,KAAK,EAAEF;UAAE,CAAC,CAAC;UAC3ClB,QAAQ,CAACC,CAAC,CAAC,CAAC1D,WAAW,CAACoE,IAAI,CAACK,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC;UACvDjB,QAAQ,CAACkB,CAAC,CAAC,CAAC3E,WAAW,CAACoE,IAAI,CAACK,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC;QACzD;MACF;IACF;IAEA,MAAMI,aAAa,GAAGrB,QAAQ,CAACsB,GAAG,CAAC,CAACC,CAAC,EAAEtB,CAAC,KAAKsB,CAAC,CAAChF,WAAW,CAAC0E,MAAM,KAAK,CAAC,GAAGhB,CAAC,GAAG,CAAC,CAAC,CAAC,CAACuB,MAAM,CAACvB,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,CAAC;IACvGoB,aAAa,CAACI,OAAO,CAACxB,CAAC,IAAI;MACzB,MAAMyB,OAAO,GAAG1B,QAAQ,CAAC2B,MAAM,CAAC,CAACC,GAAG,EAAEL,CAAC,EAAEM,GAAG,KAAK;QAC/C,IAAIA,GAAG,KAAK5B,CAAC,EAAE,OAAO2B,GAAG;QACzB,MAAME,CAAC,GAAG3B,IAAI,CAAC4B,IAAI,CACjB5B,IAAI,CAAC6B,GAAG,CAACT,CAAC,CAACX,QAAQ,CAACnC,CAAC,GAAGuB,QAAQ,CAACC,CAAC,CAAC,CAACW,QAAQ,CAACnC,CAAC,EAAE,CAAC,CAAC,GAClD0B,IAAI,CAAC6B,GAAG,CAACT,CAAC,CAACX,QAAQ,CAAClC,CAAC,GAAGsB,QAAQ,CAACC,CAAC,CAAC,CAACW,QAAQ,CAAClC,CAAC,EAAE,CAAC,CAAC,GAClDyB,IAAI,CAAC6B,GAAG,CAACT,CAAC,CAACX,QAAQ,CAACF,CAAC,GAAGV,QAAQ,CAACC,CAAC,CAAC,CAACW,QAAQ,CAACF,CAAC,EAAE,CAAC,CACnD,CAAC;QACD,OAAOoB,CAAC,GAAGF,GAAG,CAACE,CAAC,GAAG;UAAEA,CAAC;UAAED;QAAI,CAAC,GAAGD,GAAG;MACrC,CAAC,EAAE;QAAEE,CAAC,EAAEG,QAAQ;QAAEJ,GAAG,EAAE,CAAC;MAAE,CAAC,CAAC;MAC5Bb,cAAc,CAACL,IAAI,CAAC;QAAEQ,KAAK,EAAElB,CAAC;QAAEmB,KAAK,EAAEM,OAAO,CAACG;MAAI,CAAC,CAAC;MACrD7B,QAAQ,CAACC,CAAC,CAAC,CAAC1D,WAAW,CAACoE,IAAI,CAACK,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC;MACvDjB,QAAQ,CAAC0B,OAAO,CAACG,GAAG,CAAC,CAACtF,WAAW,CAACoE,IAAI,CAACK,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC;IACnE,CAAC,CAAC;IAEF,MAAMiB,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC7B,MAAMC,OAAO,GAAGA,CAACnD,IAAI,EAAE4B,MAAM,KAAK;MAChC,IAAIgB,GAAG;MACP,GAAG;QAAEA,GAAG,GAAG1B,IAAI,CAACW,KAAK,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,QAAQ,CAACiB,MAAM,CAAC;MAAE,CAAC,QAAQiB,WAAW,CAACG,GAAG,CAACR,GAAG,CAAC;MACrFK,WAAW,CAACI,GAAG,CAACT,GAAG,CAAC;MACpB7B,QAAQ,CAAC6B,GAAG,CAAC,CAAC5C,IAAI,GAAGA,IAAI;MACzBe,QAAQ,CAAC6B,GAAG,CAAC,CAAChB,MAAM,GAAGA,MAAM;IAC/B,CAAC;IACDuB,OAAO,CAAC,CAAC,EAAErC,QAAQ,CAAC3D,YAAY,CAAC;IACjC,KAAK,IAAI6D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAAC9D,OAAO,EAAEgE,CAAC,EAAE,EAAE;MACzCmC,OAAO,CAAC,CAAC,GAAGnC,CAAC,EAAEF,QAAQ,CAAC1D,QAAQ,CAAC;IACnC;IAEAC,QAAQ,CAAC0D,QAAQ,CAAC;IAClBxD,cAAc,CAACwE,cAAc,CAAC;IAC9B7B,gBAAgB,CAACa,QAAQ,CAAC;IAC1BtC,QAAQ,CAAC,CAAC,CAAC;IACXZ,WAAW,CAAC,KAAK,CAAC;IAClBE,SAAS,CAAC,IAAI,CAAC;IACfI,aAAa,CAAC,CAAC,CAAC;IAChBE,aAAa,CAAC,IAAI,CAAC;IACnBJ,cAAc,CAAC,wCAAwC,CAAC;EAC1D,CAAC;EAED,MAAMiC,gBAAgB,GAAIoD,YAAY,IAAK;IACzC,MAAMC,MAAM,GAAG;MAAE,CAAC,EAAE;IAAE,CAAC;IACvB,MAAMC,QAAQ,GAAG9E,aAAa,GAAG5B,mBAAmB,CAACwB,UAAU,CAAC,CAACrB,OAAO,GAAGH,mBAAmB,CAACwB,UAAU,CAAC,CAACtB,OAAO,GAAG,CAAC;IACtH,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIwC,QAAQ,EAAExC,CAAC,EAAE,EAAE;MAClCuC,MAAM,CAACvC,CAAC,CAAC,GAAG,CAAC;IACf;IACAsC,YAAY,CAACd,OAAO,CAACiB,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACzD,IAAI,CAAC,GAAG,CAACuD,MAAM,CAACE,IAAI,CAACzD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9EvC,aAAa,CAAC8F,MAAM,CAAC;IAErB,IAAI,CAAC7E,aAAa,EAAE;MAClB,MAAMgF,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACb,MAAM,CAAC,CAACmB,GAAG,EAAEC,GAAG,KACrDC,QAAQ,CAACD,GAAG,CAAC,IAAI,CAAC,GAAGD,GAAG,GAAGN,MAAM,CAACO,GAAG,CAAC,GAAGD,GAAG,EAAE,CAAC,CAAC;MAClD,IAAIN,MAAM,CAAC,CAAC,CAAC,KAAKD,YAAY,CAACtB,MAAM,EAAE;QAAA,IAAAgC,sBAAA;QACrCnG,WAAW,CAAC,IAAI,CAAC;QACjBE,SAAS,CAAC,CAAC,CAAC;QACZ,MAAMkG,UAAU,GAAGC,cAAc,CAAC,CAAC;QACnCzF,QAAQ,CAACwF,UAAU,CAAC;QACpB,CAAAD,sBAAA,GAAA1D,MAAM,CAACC,iBAAiB,cAAAyD,sBAAA,uBAAxBA,sBAAA,CAA0BG,SAAS,CAAC7F,UAAU,EAAE2F,UAAU,CAAC;MAC7D,CAAC,MAAM,IAAIV,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC1B1F,WAAW,CAAC,IAAI,CAAC;QACjBE,SAAS,CAAC,CAAC,CAAC;MACd;IACF;EACF,CAAC;EAED,MAAMmG,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOhD,IAAI,CAACW,KAAK,CAAErE,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,GAAIU,UAAU,IAAII,UAAU,GAAG,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,MAAM8F,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAItF,MAAM,IAAIF,MAAM,EAAE;MACpBE,MAAM,CAACuF,IAAI,CAAC,UAAU,EAAE;QAAEzF,MAAM;QAAEN;MAAW,CAAC,CAAC;IACjD;EACF,CAAC;EAED,MAAMgG,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIxF,MAAM,IAAIF,MAAM,EAAE;MACpBE,MAAM,CAACuF,IAAI,CAAC,aAAa,EAAE;QAAEzF;MAAO,CAAC,CAAC;MACtCQ,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAED,MAAMmF,eAAe,GAAIC,CAAC,IAAK;IAC7B,IAAIA,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAClB9E,aAAa,CAAC,IAAI,CAAC;MACnBE,YAAY,CAAC;QAAEL,CAAC,EAAEgF,CAAC,CAACE,OAAO;QAAEjF,CAAC,EAAE+E,CAAC,CAACG;MAAQ,CAAC,CAAC;MAC5CH,CAAC,CAACI,cAAc,CAAC,CAAC;MAClB;IACF;IACAC,iBAAiB,CAACL,CAAC,CAAC;EACtB,CAAC;EAED,MAAMM,eAAe,GAAIN,CAAC,IAAK;IAC7B,IAAI,CAAC9E,UAAU,EAAE;IACjB,MAAMqF,MAAM,GAAGP,CAAC,CAACE,OAAO,GAAG9E,SAAS,CAACJ,CAAC;IACtC,MAAMwF,MAAM,GAAGR,CAAC,CAACG,OAAO,GAAG/E,SAAS,CAACH,CAAC;IACtCF,WAAW,CAAC;MACVC,CAAC,EAAEF,QAAQ,CAACE,CAAC,GAAGwF,MAAM,GAAG,KAAK;MAC9BvF,CAAC,EAAEH,QAAQ,CAACG,CAAC,GAAGsF,MAAM,GAAG;IAC3B,CAAC,CAAC;IACFlF,YAAY,CAAC;MAAEL,CAAC,EAAEgF,CAAC,CAACE,OAAO;MAAEjF,CAAC,EAAE+E,CAAC,CAACG;IAAQ,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMM,aAAa,GAAGA,CAAA,KAAMtF,aAAa,CAAC,KAAK,CAAC;EAChD,MAAMuF,gBAAgB,GAAGA,CAAA,KAAMvF,aAAa,CAAC,KAAK,CAAC;EACnD,MAAMwF,iBAAiB,GAAIX,CAAC,IAAKA,CAAC,CAACI,cAAc,CAAC,CAAC;EAEnD,MAAMC,iBAAiB,GAAIL,CAAC,IAAK;IAC/B,MAAMY,MAAM,GAAG/F,SAAS,CAACgG,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IACb,MAAME,IAAI,GAAGF,MAAM,CAACG,qBAAqB,CAAC,CAAC;IAC3C,MAAM/F,CAAC,GAAGgF,CAAC,CAACE,OAAO,GAAGY,IAAI,CAACE,IAAI;IAC/B,MAAM/F,CAAC,GAAG+E,CAAC,CAACG,OAAO,GAAGW,IAAI,CAACG,GAAG;IAE9B,MAAMC,eAAe,GAAG3I,KAAK,CAACsF,GAAG,CAAC,CAACoB,IAAI,EAAEkC,KAAK,KAAK;MACjD,MAAMC,SAAS,GAAGC,WAAW,CAACpC,IAAI,CAAC9B,QAAQ,CAACnC,CAAC,EAAEiE,IAAI,CAAC9B,QAAQ,CAAClC,CAAC,EAAEgE,IAAI,CAAC9B,QAAQ,CAACF,CAAC,CAAC;MAChF,OAAO;QAAEgC,IAAI;QAAEkC,KAAK;QAAEC;MAAU,CAAC;IACnC,CAAC,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,SAAS,CAACnE,CAAC,GAAGsE,CAAC,CAACH,SAAS,CAACnE,CAAC,CAAC;IAEhD,KAAK,MAAM;MAAEgC,IAAI;MAAEkC,KAAK;MAAEC;IAAU,CAAC,IAAIF,eAAe,EAAE;MACxD,IAAIE,SAAS,CAACnE,CAAC,GAAG,CAAC,GAAG,EAAE;MACxB,MAAMwE,KAAK,GAAGL,SAAS,CAACpG,CAAC;MACzB,MAAM0G,KAAK,GAAGN,SAAS,CAACnG,CAAC;MACzB,MAAM0G,UAAU,GAAG1J,SAAS,GAAGmJ,SAAS,CAACQ,KAAK;MAC9C,MAAMC,EAAE,GAAG7G,CAAC,GAAGyG,KAAK;MACpB,MAAMK,EAAE,GAAG7G,CAAC,GAAGyG,KAAK;MACpB,MAAMK,QAAQ,GAAGrF,IAAI,CAAC4B,IAAI,CAACuD,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;MAC7C,IAAIC,QAAQ,IAAIJ,UAAU,EAAE;QAC1BK,eAAe,CAACb,KAAK,CAAC;QACtB;MACF;IACF;EACF,CAAC;EAED,MAAMa,eAAe,GAAIC,SAAS,IAAK;IACrC,IAAI7I,QAAQ,IAAKc,aAAa,IAAIR,UAAU,KAAKc,MAAO,IAAK,CAACN,aAAa,IAAI,CAACN,UAAW,EAAE;IAE7F,MAAMsI,WAAW,GAAG3J,KAAK,CAAC0J,SAAS,CAAC;IACpC,IAAI/I,YAAY,KAAK,IAAI,EAAE;MACzB,IAAIgJ,WAAW,CAAC1G,IAAI,MAAMtB,aAAa,GAAGM,MAAM,GAAG,CAAC,CAAC,IAAI0H,WAAW,CAAC9E,MAAM,IAAI,CAAC,EAAE;QAChFjE,eAAe,CAAC8I,SAAS,CAAC;QAC1BxI,cAAc,CAAC,uBAAuB,CAAC;MACzC;IACF,CAAC,MAAM;MACL,IAAIP,YAAY,KAAK+I,SAAS,EAAE;QAC9B9I,eAAe,CAAC,IAAI,CAAC;QACrBM,cAAc,CAACS,aAAa,GAAIR,UAAU,KAAKc,MAAM,GAAG,YAAY,GAAG,YAAY,GAAI,YAAY,CAAC;QACpG;MACF;MAEA,MAAM2H,UAAU,GAAG5J,KAAK,CAACW,YAAY,CAAC;MACtC,MAAMkJ,WAAW,GAAGD,UAAU,CAACrJ,WAAW,CAACuJ,IAAI,CAACC,OAAO,IAAI;QACzD,MAAMC,IAAI,GAAGzJ,WAAW,CAACwJ,OAAO,CAAC;QACjC,OAAQC,IAAI,CAAC7E,KAAK,KAAKxE,YAAY,IAAIqJ,IAAI,CAAC5E,KAAK,KAAKsE,SAAS,IACvDM,IAAI,CAAC5E,KAAK,KAAKzE,YAAY,IAAIqJ,IAAI,CAAC7E,KAAK,KAAKuE,SAAU;MAClE,CAAC,CAAC;MAEF,IAAIG,WAAW,EAAE;QACf,IAAIlI,aAAa,EAAE;UACjBI,MAAM,CAACuF,IAAI,CAAC,MAAM,EAAE;YAAEzF,MAAM;YAAEoI,SAAS,EAAEtJ,YAAY;YAAEuJ,SAAS,EAAER;UAAU,CAAC,CAAC;QAChF,CAAC,MAAM;UACLS,oBAAoB,CAACxJ,YAAY,EAAE+I,SAAS,CAAC;QAC/C;QACA9I,eAAe,CAAC,IAAI,CAAC;MACvB;IACF;EACF,CAAC;EAED,MAAMuJ,oBAAoB,GAAGA,CAACF,SAAS,EAAEC,SAAS,KAAK;IACrD,MAAME,YAAY,GAAG,CAAC,GAAGpK,KAAK,CAAC;IAC/B,MAAM4J,UAAU,GAAGQ,YAAY,CAACH,SAAS,CAAC;IAC1C,MAAMI,UAAU,GAAGD,YAAY,CAACF,SAAS,CAAC;IAC1C,MAAMI,YAAY,GAAGnG,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEpG,IAAI,CAACW,KAAK,CAAC8E,UAAU,CAAC/E,MAAM,GAAG,CAAC,CAAC,CAAC;IACnE+E,UAAU,CAAC/E,MAAM,IAAIyF,YAAY;IAEjC,IAAID,UAAU,CAACpH,IAAI,KAAK,CAAC,EAAE;MACzBoH,UAAU,CAACxF,MAAM,IAAIyF,YAAY;IACnC,CAAC,MAAM;MACL,MAAME,cAAc,GAAGF,YAAY;MACnC,MAAMG,eAAe,GAAGJ,UAAU,CAACxF,MAAM;MACzC,IAAI2F,cAAc,GAAGC,eAAe,EAAE;QACpCJ,UAAU,CAACpH,IAAI,GAAG,CAAC;QACnBoH,UAAU,CAACxF,MAAM,GAAGV,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAED,YAAY,GAAGnG,IAAI,CAACW,KAAK,CAAC2F,eAAe,GAAG,GAAG,CAAC,CAAC;QACjF/I,QAAQ,CAACgJ,IAAI,IAAIA,IAAI,GAAG,EAAE,IAAInJ,UAAU,GAAG,CAAC,CAAC,CAAC;MAChD,CAAC,MAAM;QACL8I,UAAU,CAACxF,MAAM,GAAGV,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEE,eAAe,GAAGtG,IAAI,CAACW,KAAK,CAAC0F,cAAc,GAAG,GAAG,CAAC,CAAC;MACrF;IACF;IACAlK,QAAQ,CAAC8J,YAAY,CAAC;IACtBjH,gBAAgB,CAACiH,YAAY,CAAC;EAChC,CAAC;EAED,MAAMO,OAAO,GAAGA,CAAA,KAAM;IACpBrJ,aAAa,CAAC,KAAK,CAAC;IACpBF,aAAa,CAACsJ,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAC/BxJ,cAAc,CAAC,0BAA0B,CAAC;IAC1C,MAAMkJ,YAAY,GAAG,CAAC,GAAGpK,KAAK,CAAC;IAC/BoK,YAAY,CAAC3E,OAAO,CAACiB,IAAI,IAAI;MAC3B,IAAIA,IAAI,CAACzD,IAAI,KAAK,CAAC,EAAEyD,IAAI,CAAC7B,MAAM,IAAI,CAAC,CAAC,KACjC,IAAI6B,IAAI,CAACzD,IAAI,IAAI,CAAC,EAAEyD,IAAI,CAAC7B,MAAM,IAAIV,IAAI,CAACW,KAAK,CAAC,CAAC,GAAGvD,UAAU,GAAG,CAAC,CAAC;IACxE,CAAC,CAAC;IACFjB,QAAQ,CAAC8J,YAAY,CAAC;IACtBQ,UAAU,CAACC,eAAe,EAAE,GAAG,CAAC;EAClC,CAAC;EAED,MAAMA,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIT,YAAY,GAAG,CAAC,GAAGpK,KAAK,CAAC;IAC7B,MAAM+D,QAAQ,GAAGhE,mBAAmB,CAACwB,UAAU,CAAC;IAChD,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAAC9D,OAAO,EAAEgE,CAAC,EAAE,EAAE;MACzC6G,UAAU,CAAC,CAAC,GAAG7G,CAAC,EAAEmG,YAAY,CAAC;IACjC;IACA9J,QAAQ,CAAC8J,YAAY,CAAC;IACtB9I,aAAa,CAAC,IAAI,CAAC;IACnBJ,cAAc,CAAC,wCAAwC,CAAC;IACxDiC,gBAAgB,CAACiH,YAAY,CAAC;EAChC,CAAC;EAED,MAAMU,UAAU,GAAGA,CAAC7H,IAAI,EAAE8H,QAAQ,KAAK;IACrC,MAAMC,SAAS,GAAGD,QAAQ,CAACzF,GAAG,CAAC,CAACoB,IAAI,EAAEkC,KAAK,MAAM;MAAElC,IAAI;MAAEkC;IAAM,CAAC,CAAC,CAAC,CAC/DpD,MAAM,CAAC,CAAC;MAAEkB;IAAK,CAAC,KAAKA,IAAI,CAACzD,IAAI,KAAKA,IAAI,IAAIyD,IAAI,CAAC7B,MAAM,IAAI,CAAC,CAAC;IAC/D,IAAImG,SAAS,CAAC/F,MAAM,KAAK,CAAC,EAAE;IAE5B,MAAMgG,KAAK,GAAG9G,IAAI,CAACyB,GAAG,CAAC,CAAC,GAAGzB,IAAI,CAACW,KAAK,CAACvD,UAAU,GAAG,CAAC,CAAC,EAAEyJ,SAAS,CAAC/F,MAAM,CAAC;IACxE,KAAK,IAAIiG,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,KAAK,EAAEC,IAAI,EAAE,EAAE;MACvC,MAAMC,cAAc,GAAGH,SAAS,CAAC7G,IAAI,CAACW,KAAK,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG4G,SAAS,CAAC/F,MAAM,CAAC,CAAC;MAC9E,MAAMmG,WAAW,GAAGD,cAAc,CAACvC,KAAK;MACxC,MAAMgB,UAAU,GAAGuB,cAAc,CAACzE,IAAI;MAEtC,MAAM2E,oBAAoB,GAAGzB,UAAU,CAACrJ,WAAW,CAAC+E,GAAG,CAACgG,SAAS,IAAI;QACnE,MAAMtB,IAAI,GAAGzJ,WAAW,CAAC+K,SAAS,CAAC;QACnC,OAAOtB,IAAI,CAAC7E,KAAK,KAAKiG,WAAW,GAAGpB,IAAI,CAAC5E,KAAK,GAAG4E,IAAI,CAAC7E,KAAK;MAC7D,CAAC,CAAC;MAEF,MAAMoG,iBAAiB,GAAGF,oBAAoB,CAAC7F,MAAM,CAACK,GAAG,IAAIkF,QAAQ,CAAClF,GAAG,CAAC,CAAC5C,IAAI,KAAKA,IAAI,CAAC;MACzF,IAAIsI,iBAAiB,CAACtG,MAAM,GAAG,CAAC,IAAId,IAAI,CAACC,MAAM,CAAC,CAAC,GAAI,GAAG,GAAG7C,UAAU,GAAG,IAAK,EAAE;QAC7E,MAAMiK,WAAW,GAAGD,iBAAiB,CAACpH,IAAI,CAACW,KAAK,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGmH,iBAAiB,CAACtG,MAAM,CAAC,CAAC;QAC3F,MAAMoF,UAAU,GAAGU,QAAQ,CAACS,WAAW,CAAC;QACxC,MAAMlB,YAAY,GAAGnG,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEpG,IAAI,CAACW,KAAK,CAAC8E,UAAU,CAAC/E,MAAM,IAAI,GAAG,GAAGtD,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC;QAC3FqI,UAAU,CAAC/E,MAAM,IAAIyF,YAAY;QAEjC,MAAMmB,sBAAsB,GAAGnB,YAAY,IAAI,GAAG,GAAG/I,UAAU,GAAG,IAAI,CAAC;QACvE,IAAIkK,sBAAsB,GAAGpB,UAAU,CAACxF,MAAM,EAAE;UAC9CwF,UAAU,CAACpH,IAAI,GAAGA,IAAI;UACtBoH,UAAU,CAACxF,MAAM,GAAGV,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAED,YAAY,GAAGnG,IAAI,CAACW,KAAK,CAACuF,UAAU,CAACxF,MAAM,GAAG,GAAG,CAAC,CAAC;QACrF,CAAC,MAAM;UACLwF,UAAU,CAACxF,MAAM,GAAGV,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEF,UAAU,CAACxF,MAAM,GAAGV,IAAI,CAACW,KAAK,CAACwF,YAAY,GAAG,GAAG,CAAC,CAAC;QACrF;MACF;IACF;EACF,CAAC;EAED,MAAMxB,WAAW,GAAGA,CAACrG,CAAC,EAAEC,CAAC,EAAEgC,CAAC,KAAK;IAC/B,MAAM2D,MAAM,GAAG/F,SAAS,CAACgG,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE,OAAO;MAAE5F,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE,CAAC;MAAEgC,CAAC,EAAE,CAAC;MAAE2E,KAAK,EAAE;IAAE,CAAC;IAClD,MAAMqC,OAAO,GAAGrD,MAAM,CAACsD,KAAK,GAAG,CAAC;IAChC,MAAMC,OAAO,GAAGvD,MAAM,CAACwD,MAAM,GAAG,CAAC;IACjC,MAAMC,IAAI,GAAG3H,IAAI,CAACM,GAAG,CAAClC,QAAQ,CAACG,CAAC,CAAC;IACjC,MAAMqJ,IAAI,GAAG5H,IAAI,CAACK,GAAG,CAACjC,QAAQ,CAACG,CAAC,CAAC;IACjC,MAAMsJ,EAAE,GAAGvJ,CAAC,GAAGqJ,IAAI,GAAGpH,CAAC,GAAGqH,IAAI;IAC9B,MAAME,EAAE,GAAGvH,CAAC,GAAGoH,IAAI,GAAGrJ,CAAC,GAAGsJ,IAAI;IAC9B,MAAMG,IAAI,GAAG/H,IAAI,CAACM,GAAG,CAAClC,QAAQ,CAACE,CAAC,CAAC;IACjC,MAAM0J,IAAI,GAAGhI,IAAI,CAACK,GAAG,CAACjC,QAAQ,CAACE,CAAC,CAAC;IACjC,MAAM2J,EAAE,GAAG1J,CAAC,GAAGwJ,IAAI,GAAGD,EAAE,GAAGE,IAAI;IAC/B,MAAME,EAAE,GAAGJ,EAAE,GAAGC,IAAI,GAAGxJ,CAAC,GAAGyJ,IAAI;IAC/B,MAAM9C,KAAK,GAAG,GAAG,IAAI,GAAG,GAAGgD,EAAE,CAAC;IAC9B,OAAO;MAAE5J,CAAC,EAAEiJ,OAAO,GAAGM,EAAE,GAAG3C,KAAK;MAAE3G,CAAC,EAAEkJ,OAAO,GAAGQ,EAAE,GAAG/C,KAAK;MAAE3E,CAAC,EAAE2H,EAAE;MAAEhD;IAAM,CAAC;EAC3E,CAAC;EAED,MAAM1F,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAM0E,MAAM,GAAG/F,SAAS,CAACgG,OAAO;IAChC,IAAI,CAACD,MAAM,EAAE;IACb,MAAMiE,GAAG,GAAGjE,MAAM,CAACkE,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEnE,MAAM,CAACsD,KAAK,EAAEtD,MAAM,CAACwD,MAAM,CAAC;IAEhDS,GAAG,CAACG,IAAI,GAAG,YAAY;IACvBH,GAAG,CAACI,SAAS,GAAG,SAAS;IACzBJ,GAAG,CAACK,SAAS,GAAG,MAAM;IACtBL,GAAG,CAACM,QAAQ,CAAC,SAASzL,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3C,IAAIQ,aAAa,EAAE;MAAA,IAAAkL,mBAAA;MACjBP,GAAG,CAACI,SAAS,GAAG,EAAAG,mBAAA,GAAAlN,WAAW,CAACsC,MAAM,CAAC,cAAA4K,mBAAA,uBAAnBA,mBAAA,CAAqBjN,IAAI,KAAI,SAAS;MACtD0M,GAAG,CAACM,QAAQ,CAACzL,UAAU,KAAKc,MAAM,GAAG,WAAW,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC;IACvE,CAAC,MAAM;MACLqK,GAAG,CAACI,SAAS,GAAGrL,UAAU,GAAG1B,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,GAAG,SAAS;MAC5D0M,GAAG,CAACM,QAAQ,CAACvL,UAAU,GAAG,WAAW,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC;IAC5D;IAEA,KAAK,MAAMyL,UAAU,IAAIvM,WAAW,EAAE;MACpC,MAAM4E,KAAK,GAAGnF,KAAK,CAAC8M,UAAU,CAAC3H,KAAK,CAAC;MACrC,MAAMC,KAAK,GAAGpF,KAAK,CAAC8M,UAAU,CAAC1H,KAAK,CAAC;MACrC,IAAI,CAACD,KAAK,IAAI,CAACC,KAAK,EAAE;MACtB,MAAM2H,UAAU,GAAGjE,WAAW,CAAC3D,KAAK,CAACP,QAAQ,CAACnC,CAAC,EAAE0C,KAAK,CAACP,QAAQ,CAAClC,CAAC,EAAEyC,KAAK,CAACP,QAAQ,CAACF,CAAC,CAAC;MACpF,MAAMsI,UAAU,GAAGlE,WAAW,CAAC1D,KAAK,CAACR,QAAQ,CAACnC,CAAC,EAAE2C,KAAK,CAACR,QAAQ,CAAClC,CAAC,EAAE0C,KAAK,CAACR,QAAQ,CAACF,CAAC,CAAC;MACpF,IAAIqI,UAAU,CAACrI,CAAC,GAAG,CAAC,GAAG,IAAIsI,UAAU,CAACtI,CAAC,GAAG,CAAC,GAAG,EAAE;MAEhD4H,GAAG,CAACW,WAAW,GAAG9H,KAAK,CAAClC,IAAI,KAAKmC,KAAK,CAACnC,IAAI,GAAGtD,WAAW,CAACwF,KAAK,CAAClC,IAAI,CAAC,CAACpD,MAAM,GAAIsF,KAAK,CAAClC,IAAI,KAAKxD,OAAO,IAAI2F,KAAK,CAACnC,IAAI,KAAKxD,OAAO,GAAG,SAAS,GAAG,SAAU;MACzJ6M,GAAG,CAACY,SAAS,GAAG,CAAC,IAAIH,UAAU,CAAC1D,KAAK,GAAG2D,UAAU,CAAC3D,KAAK,CAAC,GAAG,CAAC;MAC7DiD,GAAG,CAACa,SAAS,CAAC,CAAC;MACfb,GAAG,CAACc,MAAM,CAACL,UAAU,CAACtK,CAAC,EAAEsK,UAAU,CAACrK,CAAC,CAAC;MACtC4J,GAAG,CAACe,MAAM,CAACL,UAAU,CAACvK,CAAC,EAAEuK,UAAU,CAACtK,CAAC,CAAC;MACtC4J,GAAG,CAACzM,MAAM,CAAC,CAAC;IACd;IAEA,IAAIc,YAAY,KAAK,IAAI,EAAE;MACzB,MAAM2M,eAAe,GAAGtN,KAAK,CAACW,YAAY,CAAC;MAC3C,MAAM4M,iBAAiB,GAAGzE,WAAW,CAACwE,eAAe,CAAC1I,QAAQ,CAACnC,CAAC,EAAE6K,eAAe,CAAC1I,QAAQ,CAAClC,CAAC,EAAE4K,eAAe,CAAC1I,QAAQ,CAACF,CAAC,CAAC;MACzH,IAAI6I,iBAAiB,CAAC7I,CAAC,IAAI,CAAC,GAAG,EAAE;QAC/B4H,GAAG,CAACW,WAAW,GAAG,SAAS;QAC3BX,GAAG,CAACY,SAAS,GAAG,CAAC,GAAGK,iBAAiB,CAAClE,KAAK;QAC3CiD,GAAG,CAACkB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvB,KAAK,MAAMlC,SAAS,IAAIgC,eAAe,CAAC/M,WAAW,EAAE;UACnD,MAAMyJ,IAAI,GAAGzJ,WAAW,CAAC+K,SAAS,CAAC;UACnC,MAAMmC,eAAe,GAAGzD,IAAI,CAAC7E,KAAK,KAAKxE,YAAY,GAAGqJ,IAAI,CAAC5E,KAAK,GAAG4E,IAAI,CAAC7E,KAAK;UAC7E,MAAMkF,UAAU,GAAGrK,KAAK,CAACyN,eAAe,CAAC;UACzC,MAAMC,eAAe,GAAG5E,WAAW,CAACuB,UAAU,CAACzF,QAAQ,CAACnC,CAAC,EAAE4H,UAAU,CAACzF,QAAQ,CAAClC,CAAC,EAAE2H,UAAU,CAACzF,QAAQ,CAACF,CAAC,CAAC;UACxG,IAAIgJ,eAAe,CAAChJ,CAAC,GAAG,CAAC,GAAG,EAAE;UAE9B4H,GAAG,CAACa,SAAS,CAAC,CAAC;UACfb,GAAG,CAACc,MAAM,CAACG,iBAAiB,CAAC9K,CAAC,EAAE8K,iBAAiB,CAAC7K,CAAC,CAAC;UACpD4J,GAAG,CAACe,MAAM,CAACK,eAAe,CAACjL,CAAC,EAAEiL,eAAe,CAAChL,CAAC,CAAC;UAChD4J,GAAG,CAACzM,MAAM,CAAC,CAAC;UAEZ,MAAM8N,KAAK,GAAGxJ,IAAI,CAACyJ,KAAK,CAACF,eAAe,CAAChL,CAAC,GAAG6K,iBAAiB,CAAC7K,CAAC,EAAEgL,eAAe,CAACjL,CAAC,GAAG8K,iBAAiB,CAAC9K,CAAC,CAAC;UAC1G,MAAMoL,SAAS,GAAG,CAAC,GAAGH,eAAe,CAACrE,KAAK;UAC3CiD,GAAG,CAACa,SAAS,CAAC,CAAC;UACfb,GAAG,CAACc,MAAM,CAACM,eAAe,CAACjL,CAAC,EAAEiL,eAAe,CAAChL,CAAC,CAAC;UAChD4J,GAAG,CAACe,MAAM,CAACK,eAAe,CAACjL,CAAC,GAAGoL,SAAS,GAAG1J,IAAI,CAACM,GAAG,CAACkJ,KAAK,GAAGxJ,IAAI,CAACE,EAAE,GAAC,CAAC,CAAC,EAAEqJ,eAAe,CAAChL,CAAC,GAAGmL,SAAS,GAAG1J,IAAI,CAACK,GAAG,CAACmJ,KAAK,GAAGxJ,IAAI,CAACE,EAAE,GAAC,CAAC,CAAC,CAAC;UACpIiI,GAAG,CAACe,MAAM,CAACK,eAAe,CAACjL,CAAC,GAAGoL,SAAS,GAAG1J,IAAI,CAACM,GAAG,CAACkJ,KAAK,GAAGxJ,IAAI,CAACE,EAAE,GAAC,CAAC,CAAC,EAAEqJ,eAAe,CAAChL,CAAC,GAAGmL,SAAS,GAAG1J,IAAI,CAACK,GAAG,CAACmJ,KAAK,GAAGxJ,IAAI,CAACE,EAAE,GAAC,CAAC,CAAC,CAAC;UACpIiI,GAAG,CAACwB,SAAS,CAAC,CAAC;UACfxB,GAAG,CAACI,SAAS,GAAG,SAAS;UACzBJ,GAAG,CAAC1M,IAAI,CAAC,CAAC;QACZ;QACA0M,GAAG,CAACkB,WAAW,CAAC,EAAE,CAAC;MACrB;IACF;IAEA,MAAM7E,eAAe,GAAG3I,KAAK,CAACsF,GAAG,CAAC,CAACoB,IAAI,EAAEkC,KAAK,KAAK;MACjD,MAAMC,SAAS,GAAGC,WAAW,CAACpC,IAAI,CAAC9B,QAAQ,CAACnC,CAAC,EAAEiE,IAAI,CAAC9B,QAAQ,CAAClC,CAAC,EAAEgE,IAAI,CAAC9B,QAAQ,CAACF,CAAC,CAAC;MAChF,OAAO;QAAEgC,IAAI;QAAEkC,KAAK;QAAEC;MAAU,CAAC;IACnC,CAAC,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,SAAS,CAACnE,CAAC,GAAGsE,CAAC,CAACH,SAAS,CAACnE,CAAC,CAAC;IAEhD,KAAK,MAAM;MAAEgC,IAAI;MAAEkC,KAAK;MAAEC;IAAU,CAAC,IAAIF,eAAe,EAAE;MACxD,IAAIE,SAAS,CAACnE,CAAC,GAAG,CAAC,GAAG,EAAE;MACxB,MAAMjC,CAAC,GAAGoG,SAAS,CAACpG,CAAC;MACrB,MAAMC,CAAC,GAAGmG,SAAS,CAACnG,CAAC;MACrB,MAAM2G,KAAK,GAAGR,SAAS,CAACQ,KAAK;MAC7B,MAAM0E,cAAc,GAAGrO,SAAS,GAAG2J,KAAK;MAExC,IAAI2E,aAAa,GAAG,KAAK;MACzB,IAAIrN,YAAY,KAAK,IAAI,IAAIiI,KAAK,KAAKjI,YAAY,EAAE;QACnD,MAAM2M,eAAe,GAAGtN,KAAK,CAACW,YAAY,CAAC;QAC3CqN,aAAa,GAAGV,eAAe,CAAC/M,WAAW,CAACuJ,IAAI,CAACC,OAAO,IAAI;UAC1D,MAAMC,IAAI,GAAGzJ,WAAW,CAACwJ,OAAO,CAAC;UACjC,OAAQC,IAAI,CAAC7E,KAAK,KAAKxE,YAAY,IAAIqJ,IAAI,CAAC5E,KAAK,KAAKwD,KAAK,IAAMoB,IAAI,CAAC5E,KAAK,KAAKzE,YAAY,IAAIqJ,IAAI,CAAC7E,KAAK,KAAKyD,KAAM;QACvH,CAAC,CAAC;MACJ;MAEA,IAAIjI,YAAY,KAAKiI,KAAK,EAAE;QAC1B0D,GAAG,CAACa,SAAS,CAAC,CAAC;QACfb,GAAG,CAAC2B,GAAG,CAACxL,CAAC,EAAEC,CAAC,EAAEqL,cAAc,GAAG,CAAC,GAAG1E,KAAK,EAAE,CAAC,EAAElF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC;QACzDiI,GAAG,CAACI,SAAS,GAAG,0BAA0B;QAC1CJ,GAAG,CAAC1M,IAAI,CAAC,CAAC;MACZ,CAAC,MAAM,IAAIoO,aAAa,EAAE;QACxB1B,GAAG,CAACa,SAAS,CAAC,CAAC;QACfb,GAAG,CAAC2B,GAAG,CAACxL,CAAC,EAAEC,CAAC,EAAEqL,cAAc,GAAG,CAAC,GAAG1E,KAAK,EAAE,CAAC,EAAElF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC;QACzDiI,GAAG,CAACI,SAAS,GAAG,wBAAwB;QACxCJ,GAAG,CAAC1M,IAAI,CAAC,CAAC;QACV,MAAMsO,SAAS,GAAG,CAAC,CAAC,GAAG/J,IAAI,CAACK,GAAG,CAAC2J,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI/E,KAAK;QAC9DiD,GAAG,CAACa,SAAS,CAAC,CAAC;QACfb,GAAG,CAAC2B,GAAG,CAACxL,CAAC,EAAEC,CAAC,EAAEqL,cAAc,GAAGG,SAAS,EAAE,CAAC,EAAE/J,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC;QACzDiI,GAAG,CAACW,WAAW,GAAG,SAAS;QAC3BX,GAAG,CAACY,SAAS,GAAG,CAAC,GAAG7D,KAAK;QACzBiD,GAAG,CAACzM,MAAM,CAAC,CAAC;MACd;MAEAyM,GAAG,CAACa,SAAS,CAAC,CAAC;MACfb,GAAG,CAAC2B,GAAG,CAACxL,CAAC,EAAEC,CAAC,EAAEqL,cAAc,EAAE,CAAC,EAAE5J,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC;MAC7CiI,GAAG,CAACI,SAAS,GAAG/M,WAAW,CAAC+G,IAAI,CAACzD,IAAI,CAAC,CAACrD,IAAI;MAC3C0M,GAAG,CAACY,SAAS,GAAGtE,KAAK,KAAKjI,YAAY,GAAG,CAAC,GAAG0I,KAAK,GAAG,CAAC,GAAGA,KAAK;MAC9DiD,GAAG,CAACW,WAAW,GAAGrE,KAAK,KAAKjI,YAAY,GAAG,SAAS,GAAG,SAAS;MAChE2L,GAAG,CAAC1M,IAAI,CAAC,CAAC;MACV0M,GAAG,CAACzM,MAAM,CAAC,CAAC;MAEZyM,GAAG,CAACG,IAAI,GAAG,QAAQtI,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEpG,IAAI,CAACW,KAAK,CAAC,EAAE,GAAGuE,KAAK,CAAC,CAAC,UAAU;MAChEiD,GAAG,CAACK,SAAS,GAAG,QAAQ;MACxBL,GAAG,CAAC+B,YAAY,GAAG,QAAQ;MAC3B/B,GAAG,CAACI,SAAS,GAAG,SAAS;MACzBJ,GAAG,CAACM,QAAQ,CAAClG,IAAI,CAAC7B,MAAM,CAACyJ,QAAQ,CAAC,CAAC,EAAE7L,CAAC,EAAEC,CAAC,CAAC;MAE1C4J,GAAG,CAACG,IAAI,GAAG,GAAGtI,IAAI,CAACoG,GAAG,CAAC,CAAC,EAAEpG,IAAI,CAACW,KAAK,CAAC,CAAC,GAAGuE,KAAK,CAAC,CAAC,UAAU;MAC1DiD,GAAG,CAACI,SAAS,GAAG,0BAA0B;MAC1CJ,GAAG,CAACM,QAAQ,CAAChE,KAAK,CAAC0F,QAAQ,CAAC,CAAC,EAAE7L,CAAC,GAAGsL,cAAc,GAAG,CAAC,GAAG1E,KAAK,EAAE3G,CAAC,GAAGqL,cAAc,GAAG,CAAC,GAAG1E,KAAK,CAAC;IAChG;EACF,CAAC;EAED,oBACEjK,OAAA;IAAKmP,SAAS,EAAC,8DAA8D;IAAAC,QAAA,gBAC3EpP,OAAA;MAAImP,SAAS,EAAC,yBAAyB;MAAAC,QAAA,GAAC,aAAW,EAAC7M,aAAa,GAAG,WAAWE,MAAM,EAAE,GAAG,WAAWN,UAAU,EAAE;IAAA;MAAAkN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvHxP,OAAA;MAAKmP,SAAS,EAAC,cAAc;MAAAC,QAAA,GAC1B,CAAC7M,aAAa,iBAAIvC,OAAA;QAAMmP,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAC,SAAO,eAAApP,OAAA;UAAMmP,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAE/M;QAAK;UAAAgN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EACjGhI,MAAM,CAACiI,OAAO,CAACpO,UAAU,CAAC,CAAC6E,GAAG,CAAC,CAAC,CAACrC,IAAI,EAAE6L,KAAK,CAAC,KAC5CnP,WAAW,CAACsD,IAAI,CAAC,iBACf7D,OAAA;QAAiBmP,SAAS,EAAC,MAAM;QAAAC,QAAA,GAAC,MAC1B,EAAC7O,WAAW,CAACsD,IAAI,CAAC,CAACnD,IAAI,EAAC,IAAE,eAAAV,OAAA;UAAM2P,KAAK,EAAE;YAACC,KAAK,EAAErP,WAAW,CAACsD,IAAI,CAAC,CAACrD;UAAI,CAAE;UAAA4O,QAAA,EAAEM;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GADnF3L,IAAI;QAAAwL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CAET,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACL/N,QAAQ,iBACPzB,OAAA;MAAKmP,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1B7M,aAAa,GACTZ,MAAM,KAAKkB,MAAM,GAAG,UAAU,GAAG,YAAY,GAC7ClB,MAAM,KAAK,CAAC,GAAG,mBAAmBU,KAAK,EAAE,GAAG;IAAY;MAAAgN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CACN,eACDxP,OAAA;MAAKmP,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEvN;IAAW;MAAAwN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAChD,CAACjN,aAAa,gBACbvC,OAAA,CAAAE,SAAA;MAAAkP,QAAA,gBACEpP,OAAA;QACE6P,GAAG,EAAE3M,SAAU;QACfqJ,KAAK,EAAE,GAAI;QACXE,MAAM,EAAE,GAAI;QACZ0C,SAAS,EAAC,sCAAsC;QAChDW,WAAW,EAAE1H,eAAgB;QAC7B2H,WAAW,EAAEpH,eAAgB;QAC7BqH,SAAS,EAAElH,aAAc;QACzBmH,YAAY,EAAElH,gBAAiB;QAC/BmH,aAAa,EAAElH;MAAkB;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFxP,OAAA;QAAKmP,SAAS,EAAC,0CAA0C;QAAAC,QAAA,gBACvDpP,OAAA;UACEmP,SAAS,EAAC,iDAAiD;UAC3DgB,OAAO,EAAEA,CAAA,KAAM3O,eAAe,CAAC,IAAI,CAAE;UACrC4O,QAAQ,EAAE,CAACnO,UAAU,IAAIV,YAAY,KAAK,IAAK;UAAA6N,QAAA,EAChD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxP,OAAA;UACEmP,SAAS,EAAC,mDAAmD;UAC7DgB,OAAO,EAAE5E,OAAQ;UACjB6E,QAAQ,EAAE,CAACnO,UAAW;UAAAmN,QAAA,EACvB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxP,OAAA;UACEmP,SAAS,EAAC,iDAAiD;UAC3DgB,OAAO,EAAEA,CAAA,KAAM/M,WAAW,CAAC;YAAEC,CAAC,EAAE,CAAC;YAAEC,CAAC,EAAE;UAAE,CAAC,CAAE;UAAA8L,QAAA,EAC5C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxP,OAAA;UACEmP,SAAS,EAAC,iDAAiD;UAC3DgB,OAAO,EAAEjM,iBAAkB;UAAAkL,QAAA,EAC5B;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxP,OAAA;UACEmP,SAAS,EAAC,qDAAqD;UAC/DgB,OAAO,EAAEA,CAAA,KAAM3N,gBAAgB,CAAC,IAAI,CAAE;UAAA4M,QAAA,EACvC;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACXxP,OAAA;QAAKmP,SAAS,EAAC,0CAA0C;QAAAC,QAAA,gBACvDpP,OAAA;UAAMmP,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC3Ca,KAAK,CAACC,IAAI,CAAC;UAAEzK,MAAM,EAAE;QAAG,CAAC,EAAE,CAAC0K,CAAC,EAAE1L,CAAC,kBAC/B7E,OAAA;UAEEmP,SAAS,EAAE,qBAAqBhN,UAAU,KAAK0C,CAAC,GAAG,aAAa,GAAG,+BAA+B,EAAG;UACrGsL,OAAO,EAAEA,CAAA,KAAM;YAAE/N,aAAa,CAACyC,CAAC,CAAC;YAAEX,iBAAiB,CAAC,CAAC;UAAE,CAAE;UAAAkL,QAAA,EAEzDvK;QAAC,GAJGA,CAAC;UAAAwK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKA,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,eACD,CAAC,gBAEHxP,OAAA,CAAAE,SAAA;MAAAkP,QAAA,gBACEpP,OAAA;QAAKmP,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBpP,OAAA;UACEwQ,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEhO,MAAO;UACdiO,QAAQ,EAAGrI,CAAC,IAAK3F,SAAS,CAAC2F,CAAC,CAACsI,MAAM,CAACF,KAAK,CAAE;UAC3CG,WAAW,EAAC,eAAe;UAC3BzB,SAAS,EAAC;QAAsB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC,eACFxP,OAAA;UAAQmQ,OAAO,EAAElI,QAAS;UAACkH,SAAS,EAAC,sDAAsD;UAAAC,QAAA,EAAC;QAE5F;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACR,CAACxM,OAAO,IAAIH,MAAM,iBACjB7C,OAAA;UAAQmQ,OAAO,EAAEhI,OAAQ;UAACgH,SAAS,EAAC,wDAAwD;UAAAC,QAAA,EAAC;QAE7F;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eACDxP,OAAA;UACEmP,SAAS,EAAC,sDAAsD;UAChEgB,OAAO,EAAEA,CAAA,KAAM;YAAE3N,gBAAgB,CAAC,KAAK,CAAC;YAAEG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEqB,UAAU,CAAC,CAAC;YAAEpB,SAAS,CAAC,IAAI,CAAC;UAAE,CAAE;UAAAwM,QAAA,EACpF;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EACL3M,MAAM,iBACL7C,OAAA;QACE6P,GAAG,EAAE3M,SAAU;QACfqJ,KAAK,EAAE,GAAI;QACXE,MAAM,EAAE,GAAI;QACZ0C,SAAS,EAAC,sCAAsC;QAChDW,WAAW,EAAE1H,eAAgB;QAC7B2H,WAAW,EAAEpH,eAAgB;QAC7BqH,SAAS,EAAElH,aAAc;QACzBmH,YAAY,EAAElH,gBAAiB;QAC/BmH,aAAa,EAAElH;MAAkB;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CACF,eACDxP,OAAA;QAAAoP,QAAA,GAAK,WAAS,EAAC5H,MAAM,CAACC,IAAI,CAAC3G,OAAO,CAAC,CAAC+E,MAAM,EAAC,GAAC,EAAClF,mBAAmB,CAACwB,UAAU,CAAC,CAACrB,OAAO;MAAA;QAAAuO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,eAC3F,CACH,eACDxP,OAAA;MAAKmP,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAE5C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNxP,OAAA;MAAKmP,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACzCpP,OAAA;QAAAoP,QAAA,EAAG;MAA+E;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACtFxP,OAAA;QAAAoP,QAAA,EAAG;MAAmE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1ExP,OAAA;QAAAoP,QAAA,EAAG;MAA2F;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/F,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpP,EAAA,CAxpBID,aAAa;AAAA0Q,EAAA,GAAb1Q,aAAa;AA0pBnB,eAAeA,aAAa;AAAC,IAAA0Q,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}